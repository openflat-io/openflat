{"version":3,"file":"index.08e30538.js","sources":["../../../../packages/flat-pages/src/SmallClassPage/index.tsx"],"sourcesContent":["import \"./SmallClassPage.less\";\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { message } from \"antd\";\nimport { observer } from \"mobx-react-lite\";\nimport { useTranslate } from \"@netless/flat-i18n\";\nimport {\n    NetworkStatus,\n    RoomInfo,\n    TopBar,\n    TopBarDivider,\n    Timer,\n    CloudRecordBtn,\n    TopBarRightBtn,\n    SVGScreenSharing,\n    SVGExit,\n    SVGMenuFold,\n    SVGMenuUnfold,\n} from \"flat-components\";\n\nimport InviteButton from \"../components/InviteButton\";\nimport { RealtimePanel } from \"../components/RealtimePanel\";\nimport { ChatPanel } from \"../components/ChatPanel\";\nimport { RTCAvatar } from \"../components/RTCAvatar\";\nimport { Whiteboard } from \"../components/Whiteboard\";\nimport ExitRoomConfirm, {\n    ExitRoomConfirmType,\n    useExitRoomConfirmModal,\n} from \"../components/ExitRoomConfirm\";\nimport { RoomStatusStoppedModal } from \"../components/ClassRoom/RoomStatusStoppedModal\";\n\nimport { RoomStatus } from \"@netless/flat-server-api\";\n\nimport { CloudStorageButton } from \"../components/CloudStorageButton\";\nimport { ShareScreen } from \"../components/ShareScreen\";\nimport { useLoginCheck } from \"../utils/use-login-check\";\nimport { withClassroomStore, WithClassroomStoreProps } from \"../utils/with-classroom-store\";\nimport { WindowsSystemBtnContext } from \"../components/StoreProvider\";\nimport { ShareScreenPicker } from \"../components/ShareScreen/ShareScreenPicker\";\nimport { ExtraPadding } from \"../components/ExtraPadding\";\n\nexport type SmallClassPageProps = {};\n\nexport const SmallClassPage = withClassroomStore<SmallClassPageProps>(\n    observer<WithClassroomStoreProps<SmallClassPageProps>>(function SmallClassPage({\n        classroomStore,\n    }) {\n        useLoginCheck();\n        const t = useTranslate();\n\n        const whiteboardStore = classroomStore.whiteboardStore;\n        const windowsBtn = useContext(WindowsSystemBtnContext);\n\n        const { confirm, ...exitConfirmModalProps } = useExitRoomConfirmModal(classroomStore);\n\n        const [isRealtimeSideOpen, openRealtimeSide] = useState(true);\n\n        useEffect(() => {\n            if (classroomStore.isCreator && classroomStore.roomStatus === RoomStatus.Idle) {\n                void classroomStore.startClass();\n            }\n        }, [classroomStore]);\n\n        return (\n            <div className=\"small-class-page-container\">\n                <div className=\"small-class-realtime-container\">\n                    <div className=\"small-class-realtime-box\">\n                        {windowsBtn ? (\n                            <TopBar\n                                // center={renderTopBarCenter()}\n                                left={renderTopBarLeft()}\n                                right={renderTopBarRight()}\n                                showWindowsSystemBtn={windowsBtn.showWindowsBtn}\n                                onClickWindowsSystemBtn={windowsBtn.onClickWindowsSystemBtn}\n                                onDoubleClick={windowsBtn.clickWindowMaximize}\n                            />\n                        ) : (\n                            <TopBar left={renderTopBarLeft()} right={renderTopBarRight()} />\n                        )}\n                        {renderAvatars()}\n                        <div className=\"small-class-realtime-content\">\n                            <div className=\"small-class-realtime-content-container\">\n                                <ShareScreen classroomStore={classroomStore} />\n                                <ShareScreenPicker\n                                    classroomStore={classroomStore}\n                                    handleOk={() => classroomStore.toggleShareScreen(true)}\n                                />\n                                <Whiteboard\n                                    classRoomStore={classroomStore}\n                                    whiteboardStore={whiteboardStore}\n                                />\n                            </div>\n                            {renderRealtimePanel()}\n                        </div>\n                        <ExitRoomConfirm\n                            isCreator={classroomStore.isCreator}\n                            {...exitConfirmModalProps}\n                        />\n                        <RoomStatusStoppedModal\n                            isCreator={classroomStore.isCreator}\n                            isRemoteLogin={classroomStore.isRemoteLogin}\n                            roomStatus={classroomStore.roomStatus}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n\n        function renderAvatars(): React.ReactNode {\n            return (\n                <div className=\"small-class-realtime-avatars-wrap\">\n                    {classroomStore.isJoinedRTC && (\n                        <div className=\"small-class-realtime-avatars\">\n                            <RTCAvatar\n                                avatarUser={classroomStore.users.creator}\n                                isAvatarUserCreator={true}\n                                isCreator={classroomStore.isCreator}\n                                rtcAvatar={\n                                    classroomStore.users.creator &&\n                                    classroomStore.rtc.getAvatar(\n                                        classroomStore.users.creator.rtcUID,\n                                    )\n                                }\n                                small={true}\n                                updateDeviceState={classroomStore.updateDeviceState}\n                                userUUID={classroomStore.userUUID}\n                            />\n                            {classroomStore.onStageUserUUIDs.map(renderAvatar)}\n                        </div>\n                    )}\n                </div>\n            );\n        }\n\n        function renderTopBarLeft(): React.ReactNode {\n            return (\n                <>\n                    <ExtraPadding />\n                    <NetworkStatus networkQuality={classroomStore.networkQuality} />\n                    {classroomStore.isCreator ? (\n                        classroomStore.roomInfo?.beginTime && (\n                            <Timer\n                                beginTime={classroomStore.roomInfo.beginTime}\n                                roomStatus={classroomStore.roomStatus}\n                            />\n                        )\n                    ) : (\n                        <RoomInfo\n                            roomStatus={classroomStore.roomStatus}\n                            roomType={classroomStore.roomInfo?.roomType}\n                        />\n                    )}\n                </>\n            );\n        }\n\n        // function renderClassMode(): React.ReactNode {\n        //     return classroomStore.classMode === ClassModeType.Lecture ? (\n        //         <TopBarRoundBtn\n        //             dark\n        //             icon={<SVGModeLecture />}\n        //             title={t(\"switch-to-interactive-mode\")}\n        //             onClick={classroomStore.toggleClassMode}\n        //         >\n        //             {t(\"lecture-mode\")}\n        //         </TopBarRoundBtn>\n        //     ) : (\n        //         <TopBarRoundBtn\n        //             dark\n        //             icon={<SVGModeInteractive />}\n        //             title={t(\"switch-to-lecture-mode\")}\n        //             onClick={classroomStore.toggleClassMode}\n        //         >\n        //             {t(\"interactive-mode\")}\n        //         </TopBarRoundBtn>\n        //     );\n        // }\n\n        // function renderTopBarCenter(): React.ReactNode {\n        //     if (!classroomStore.isCreator) {\n        //         return null;\n        //     }\n        //     return renderClassMode();\n        // }\n\n        function renderTopBarRight(): React.ReactNode {\n            return (\n                <>\n                    {whiteboardStore.isWritable && !classroomStore.isRemoteScreenSharing && (\n                        <TopBarRightBtn\n                            icon={<SVGScreenSharing active={classroomStore.isScreenSharing} />}\n                            title={t(\"share-screen.self\")}\n                            onClick={() => {\n                                if (window.isElectron) {\n                                    if (classroomStore.isScreenSharing) {\n                                        classroomStore.toggleShareScreen(false);\n                                    } else {\n                                        classroomStore.toggleShareScreenPicker(true);\n                                    }\n                                } else {\n                                    classroomStore.toggleShareScreen();\n                                }\n                            }}\n                        />\n                    )}\n\n                    {classroomStore.isCreator && (\n                        <CloudRecordBtn\n                            isRecording={classroomStore.isRecording}\n                            loading={classroomStore.isRecordingLoading}\n                            onClick={() => {\n                                void classroomStore.toggleRecording({\n                                    onStop() {\n                                        void message.success(t(\"recording-completed-tips\"));\n                                    },\n                                });\n                            }}\n                        />\n                    )}\n                    <CloudStorageButton classroom={classroomStore} />\n                    <InviteButton roomInfo={classroomStore.roomInfo} />\n                    {!windowsBtn?.showWindowsBtn && (\n                        <TopBarRightBtn\n                            icon={<SVGExit />}\n                            title={t(\"exit\")}\n                            onClick={() => confirm(ExitRoomConfirmType.ExitButton)}\n                        />\n                    )}\n                    {windowsBtn?.showWindowsBtn ? null : <TopBarDivider />}\n                    <TopBarRightBtn\n                        icon={isRealtimeSideOpen ? <SVGMenuUnfold /> : <SVGMenuFold />}\n                        title={isRealtimeSideOpen ? t(\"side-panel.hide\") : t(\"side-panel.show\")}\n                        onClick={() => {\n                            openRealtimeSide(isRealtimeSideOpen => !isRealtimeSideOpen);\n                            whiteboardStore.setRightSideClose(isRealtimeSideOpen);\n                        }}\n                    />\n                    {windowsBtn?.showWindowsBtn && <TopBarDivider />}\n                </>\n            );\n        }\n\n        function renderRealtimePanel(): React.ReactNode {\n            return (\n                <RealtimePanel\n                    chatSlot={\n                        <ChatPanel\n                            classRoomStore={classroomStore}\n                            maxSpeakingUsers={16}\n                        ></ChatPanel>\n                    }\n                    isShow={isRealtimeSideOpen}\n                    isVideoOn={false}\n                    videoSlot={null}\n                />\n            );\n        }\n\n        function renderAvatar(userUUID: string): React.ReactNode {\n            const user = classroomStore.users.cachedUsers.get(userUUID);\n            return (\n                <RTCAvatar\n                    key={userUUID}\n                    avatarUser={user}\n                    isAvatarUserCreator={false}\n                    isCreator={classroomStore.isCreator}\n                    rtcAvatar={user && classroomStore.rtc.getAvatar(user.rtcUID)}\n                    small={true}\n                    updateDeviceState={(uid, camera, mic) => {\n                        // Disallow toggling mic when not speak.\n                        const _mic =\n                            whiteboardStore.isWritable ||\n                            !user ||\n                            user.userUUID === classroomStore.ownerUUID ||\n                            user.userUUID !== classroomStore.users.currentUser?.userUUID\n                                ? mic\n                                : user.mic;\n                        classroomStore.updateDeviceState(uid, camera, _mic);\n                    }}\n                    userUUID={classroomStore.userUUID}\n                />\n            );\n        }\n    }),\n);\n\nexport default SmallClassPage;\n"],"names":["SmallClassPage","withClassroomStore","observer","classroomStore","useLoginCheck","t","useTranslate","whiteboardStore","windowsBtn","useContext","WindowsSystemBtnContext","confirm","exitConfirmModalProps","useExitRoomConfirmModal","isRealtimeSideOpen","openRealtimeSide","useState","useEffect","isCreator","roomStatus","RoomStatus","Idle","startClass","_jsxDEV","TopBar","renderTopBarLeft","renderTopBarRight","showWindowsBtn","onClickWindowsSystemBtn","clickWindowMaximize","_jsxFileName","renderAvatars","ShareScreen","ShareScreenPicker","toggleShareScreen","Whiteboard","renderRealtimePanel","ExitRoomConfirm","RoomStatusStoppedModal","isRemoteLogin","isJoinedRTC","RTCAvatar","users","creator","rtc","getAvatar","rtcUID","updateDeviceState","userUUID","onStageUserUUIDs","map","renderAvatar","_Fragment","ExtraPadding","NetworkStatus","networkQuality","roomInfo","beginTime","Timer","RoomInfo","roomType","isWritable","isRemoteScreenSharing","TopBarRightBtn","SVGScreenSharing","isScreenSharing","window","isElectron","toggleShareScreenPicker","CloudRecordBtn","isRecording","isRecordingLoading","toggleRecording","onStop","message","success","CloudStorageButton","InviteButton","SVGExit","ExitRoomConfirmType","ExitButton","TopBarDivider","SVGMenuUnfold","SVGMenuFold","setRightSideClose","RealtimePanel","ChatPanel","user","cachedUsers","get","uid","camera","mic","_mic","ownerUUID","currentUser"],"mappings":"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"}