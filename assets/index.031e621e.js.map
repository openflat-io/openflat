{"version":3,"file":"index.031e621e.js","sources":["../../../../packages/flat-pages/src/OneToOnePage/index.tsx"],"sourcesContent":["import \"./OneToOnePage.less\";\n\nimport React, { useContext, useState } from \"react\";\nimport { useTranslate } from \"@netless/flat-i18n\";\nimport { observer } from \"mobx-react-lite\";\nimport { message } from \"antd\";\nimport {\n    NetworkStatus,\n    RoomInfo,\n    TopBar,\n    TopBarRightBtn,\n    TopBarDivider,\n    Timer,\n    CloudRecordBtn,\n    SVGScreenSharing,\n    SVGExit,\n    SVGMenuFold,\n    SVGMenuUnfold,\n} from \"flat-components\";\n\nimport InviteButton from \"../components/InviteButton\";\nimport { RealtimePanel } from \"../components/RealtimePanel\";\nimport { ChatPanel } from \"../components/ChatPanel\";\nimport { RTCAvatar } from \"../components/RTCAvatar\";\nimport {\n    ExitRoomConfirm,\n    ExitRoomConfirmType,\n    useExitRoomConfirmModal,\n} from \"../components/ExitRoomConfirm\";\nimport { Whiteboard } from \"../components/Whiteboard\";\nimport { RoomStatusStoppedModal } from \"../components/ClassRoom/RoomStatusStoppedModal\";\nimport { CloudStorageButton } from \"../components/CloudStorageButton\";\nimport { ShareScreen } from \"../components/ShareScreen\";\nimport { useLoginCheck } from \"../utils/use-login-check\";\nimport { withClassroomStore, WithClassroomStoreProps } from \"../utils/with-classroom-store\";\nimport { WindowsSystemBtnContext } from \"../components/StoreProvider\";\nimport { ShareScreenPicker } from \"../components/ShareScreen/ShareScreenPicker\";\nimport { ExtraPadding } from \"../components/ExtraPadding\";\n\nexport type OneToOnePageProps = {};\n\nexport const OneToOnePage = withClassroomStore<OneToOnePageProps>(\n    observer<WithClassroomStoreProps<OneToOnePageProps>>(function OneToOnePage({ classroomStore }) {\n        useLoginCheck();\n\n        const t = useTranslate();\n\n        const whiteboardStore = classroomStore.whiteboardStore;\n        const windowsBtn = useContext(WindowsSystemBtnContext);\n\n        const { confirm, ...exitConfirmModalProps } = useExitRoomConfirmModal(classroomStore);\n\n        const [isRealtimeSideOpen, openRealtimeSide] = useState(true);\n\n        return (\n            <div className=\"one-to-one-class-page-container\">\n                <div className=\"one-to-one-realtime-container\">\n                    <div className=\"one-to-one-realtime-box\">\n                        {windowsBtn ? (\n                            <TopBar\n                                left={renderTopBarLeft()}\n                                right={renderTopBarRight()}\n                                showWindowsSystemBtn={windowsBtn.showWindowsBtn}\n                                onClickWindowsSystemBtn={windowsBtn.onClickWindowsSystemBtn}\n                                onDoubleClick={windowsBtn.clickWindowMaximize}\n                            />\n                        ) : (\n                            <TopBar left={renderTopBarLeft()} right={renderTopBarRight()} />\n                        )}\n                        <div className=\"one-to-one-realtime-content\">\n                            <div className=\"one-to-one-realtime-content-container\">\n                                <ShareScreen classroomStore={classroomStore} />\n                                <ShareScreenPicker\n                                    classroomStore={classroomStore}\n                                    handleOk={() => classroomStore.toggleShareScreen(true)}\n                                />\n                                <Whiteboard\n                                    classRoomStore={classroomStore}\n                                    whiteboardStore={whiteboardStore}\n                                />\n                            </div>\n                            {renderRealtimePanel()}\n                        </div>\n                        <ExitRoomConfirm\n                            isCreator={classroomStore.isCreator}\n                            {...exitConfirmModalProps}\n                        />\n                        <RoomStatusStoppedModal\n                            isCreator={classroomStore.isCreator}\n                            isRemoteLogin={classroomStore.isRemoteLogin}\n                            roomStatus={classroomStore.roomStatus}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n\n        function renderTopBarLeft(): React.ReactNode {\n            return (\n                <>\n                    <ExtraPadding />\n                    <NetworkStatus networkQuality={classroomStore.networkQuality} />\n                    {classroomStore.isCreator ? (\n                        classroomStore.roomInfo?.beginTime && (\n                            <Timer\n                                beginTime={classroomStore.roomInfo.beginTime}\n                                roomStatus={classroomStore.roomStatus}\n                            />\n                        )\n                    ) : (\n                        <RoomInfo\n                            roomStatus={classroomStore.roomStatus}\n                            roomType={classroomStore.roomInfo?.roomType}\n                        />\n                    )}\n                </>\n            );\n        }\n\n        function renderTopBarRight(): React.ReactNode {\n            return (\n                <>\n                    {whiteboardStore.isWritable && !classroomStore.isRemoteScreenSharing && (\n                        <TopBarRightBtn\n                            icon={<SVGScreenSharing active={classroomStore.isScreenSharing} />}\n                            title={t(\"share-screen.self\")}\n                            onClick={() => {\n                                if (window.isElectron) {\n                                    if (classroomStore.isScreenSharing) {\n                                        classroomStore.toggleShareScreen(false);\n                                    } else {\n                                        classroomStore.toggleShareScreenPicker(true);\n                                    }\n                                } else {\n                                    classroomStore.toggleShareScreen();\n                                }\n                            }}\n                        />\n                    )}\n\n                    {classroomStore.isCreator && (\n                        <CloudRecordBtn\n                            isRecording={classroomStore.isRecording}\n                            loading={classroomStore.isRecordingLoading}\n                            onClick={() => {\n                                void classroomStore.toggleRecording({\n                                    onStop() {\n                                        void message.success(t(\"recording-completed-tips\"));\n                                    },\n                                });\n                            }}\n                        />\n                    )}\n                    {/* TODO: open cloud-storage sub window */}\n                    <CloudStorageButton classroom={classroomStore} />\n                    <InviteButton roomInfo={classroomStore.roomInfo} />\n                    {!windowsBtn?.showWindowsBtn && (\n                        <TopBarRightBtn\n                            icon={<SVGExit />}\n                            title={t(\"exit\")}\n                            onClick={() => confirm(ExitRoomConfirmType.ExitButton)}\n                        />\n                    )}\n                    {windowsBtn?.showWindowsBtn ? null : <TopBarDivider />}\n                    <TopBarRightBtn\n                        icon={isRealtimeSideOpen ? <SVGMenuUnfold /> : <SVGMenuFold />}\n                        title={isRealtimeSideOpen ? t(\"side-panel.hide\") : t(\"side-panel.show\")}\n                        onClick={handleSideOpenerSwitch}\n                    />\n                    {windowsBtn?.showWindowsBtn && <TopBarDivider />}\n                </>\n            );\n        }\n\n        function renderRealtimePanel(): React.ReactNode {\n            return (\n                <RealtimePanel\n                    chatSlot={\n                        <ChatPanel\n                            classRoomStore={classroomStore}\n                            disableEndSpeaking={false}\n                            maxSpeakingUsers={1}\n                        ></ChatPanel>\n                    }\n                    isShow={isRealtimeSideOpen}\n                    isVideoOn={classroomStore.isJoinedRTC}\n                    videoSlot={\n                        <div className=\"one-to-one-rtc-avatar-container\">\n                            <RTCAvatar\n                                avatarUser={classroomStore.users.creator}\n                                isAvatarUserCreator={true}\n                                isCreator={classroomStore.isCreator}\n                                rtcAvatar={\n                                    classroomStore.users.creator &&\n                                    classroomStore.rtc.getAvatar(\n                                        classroomStore.users.creator.rtcUID,\n                                    )\n                                }\n                                updateDeviceState={classroomStore.updateDeviceState}\n                                userUUID={classroomStore.userUUID}\n                            />\n                            {classroomStore.firstOnStageUser && (\n                                <RTCAvatar\n                                    avatarUser={classroomStore.firstOnStageUser}\n                                    isAvatarUserCreator={false}\n                                    isCreator={classroomStore.isCreator}\n                                    rtcAvatar={\n                                        classroomStore.firstOnStageUser &&\n                                        classroomStore.rtc.getAvatar(\n                                            classroomStore.firstOnStageUser.rtcUID,\n                                        )\n                                    }\n                                    updateDeviceState={classroomStore.updateDeviceState}\n                                    userUUID={classroomStore.userUUID}\n                                />\n                            )}\n                        </div>\n                    }\n                />\n            );\n        }\n\n        function handleSideOpenerSwitch(): void {\n            openRealtimeSide(isRealtimeSideOpen => !isRealtimeSideOpen);\n            whiteboardStore.setRightSideClose(isRealtimeSideOpen);\n        }\n    }),\n);\n\nexport default OneToOnePage;\n"],"names":["OneToOnePage","withClassroomStore","observer","classroomStore","useLoginCheck","t","useTranslate","whiteboardStore","windowsBtn","useContext","WindowsSystemBtnContext","confirm","exitConfirmModalProps","useExitRoomConfirmModal","isRealtimeSideOpen","openRealtimeSide","useState","_jsxDEV","TopBar","renderTopBarLeft","renderTopBarRight","showWindowsBtn","onClickWindowsSystemBtn","clickWindowMaximize","_jsxFileName","ShareScreen","ShareScreenPicker","toggleShareScreen","Whiteboard","renderRealtimePanel","ExitRoomConfirm","isCreator","RoomStatusStoppedModal","isRemoteLogin","roomStatus","_Fragment","ExtraPadding","NetworkStatus","networkQuality","roomInfo","beginTime","Timer","RoomInfo","roomType","isWritable","isRemoteScreenSharing","TopBarRightBtn","SVGScreenSharing","isScreenSharing","window","isElectron","toggleShareScreenPicker","CloudRecordBtn","isRecording","isRecordingLoading","toggleRecording","onStop","message","success","CloudStorageButton","InviteButton","SVGExit","ExitRoomConfirmType","ExitButton","TopBarDivider","SVGMenuUnfold","SVGMenuFold","handleSideOpenerSwitch","RealtimePanel","ChatPanel","isJoinedRTC","RTCAvatar","users","creator","rtc","getAvatar","rtcUID","updateDeviceState","userUUID","firstOnStageUser","setRightSideClose"],"mappings":"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"}