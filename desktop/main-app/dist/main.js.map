{
  "version": 3,
  "sources": ["../src/utils/bootup-flow.ts", "../src/bootup/init-env.ts", "../src/bootup/init-window.ts", "../../../packages/flat-types/src/constants/index.ts", "../src/window-manager/window-store.ts", "../src/utils/ipc-actions.ts", "../src/utils/runtime.ts", "../src/utils/update-service.ts", "../src/utils/ipc-emit.ts", "../src/window-manager/window-manager.ts", "../src/window-manager/abstract.ts", "../src/utils/window-event.ts", "../src/window-manager/default-options.ts", "../src/window-manager/window-main/index.ts", "../src/window-manager/window-portal/utils.ts", "../src/window-manager/window-portal/window-share-screen-tip.ts", "../src/window-manager/window-portal/window-preview-file.ts", "../src/window-manager/index.ts", "../src/bootup/init-webRequest.ts", "../src/bootup/init-menus.ts", "../src/bootup/init-app-ipc.ts", "../src/bootup/init-app-listener.ts", "../src/utils/close-app.ts", "../src/bootup/init-other.ts", "../src/bootup/init-url-protocol.ts", "../src/index.ts"],
  "sourcesContent": ["export default async (itemNames: Array<() => any>): Promise<void> => {\n    for (const item of itemNames) {\n        await item();\n    }\n};\n", "import { app } from \"electron\";\n\nexport default (): void => {\n    // disable warning: \"kq_init: detected broken kqueue; not using.\"\n    // link: https://github.com/tmux/tmux/issues/475\n    // but i don\u2019t know where tmux is referenced. If you can find it and submit a PR, we would be very grateful.\n    // @ts-ignore\n    process.env.EVENT_NOKQUEUE = 1;\n\n    app.setAsDefaultProtocolClient(\"x-agora-flat-client\");\n\n    // support more WebGL contexts\n    // RTC and PPT will occupy WebGL contexts\n    app.commandLine.appendSwitch(\"max-active-webgl-contexts\", \"40\");\n};\n", "import { app } from \"electron\";\nimport { windowManager } from \"../window-manager\";\nimport { constants } from \"flat-types\";\n\nexport default (): void => {\n    app.allowRendererProcessReuse = false;\n\n    windowManager.create(constants.WindowsName.Main);\n};\n", "export enum WindowsName {\n    Main = \"Main\",\n    ShareScreenTip = \"ShareScreenTip\",\n    PreviewFile = \"PreviewFile\",\n}\n\nexport const PageSize = {\n    Splash: {\n        width: 960,\n        height: 640,\n    },\n    Login: {\n        width: 960,\n        height: 640,\n    },\n    Main: {\n        width: 960,\n        height: 640,\n    },\n    Class: {\n        width: 1280,\n        height: 720,\n    },\n    Replay: {\n        width: 1280,\n        height: 720,\n    },\n    ShareScreenTip: {\n        width: 320,\n        height: 48,\n    },\n    PreviewFile: {\n        // approximately equal to 16/9\n        width: 889,\n        height: 500,\n    },\n} as const;\n\nexport type WindowStatus = \"minimize\" | \"maximize\" | \"close\";\n\nexport const Portal = \"portal;\";\n", "import { constants } from \"flat-types\";\nimport { AbstractWindows } from \"./abstract\";\n\nexport class WindowStore<CUSTOM_WINDOWS extends AbstractWindows> {\n    public constructor(protected readonly wins: CUSTOM_WINDOWS) {}\n\n    public windowType<NAME extends constants.WindowsName>(name: NAME): CUSTOM_WINDOWS[NAME] {\n        return this.wins[name];\n    }\n}\n", "import { windowManager } from \"../window-manager\";\nimport { ipc } from \"flat-types\";\nimport { app, ipcMain, powerSaveBlocker } from \"electron\";\nimport runtime from \"./runtime\";\nimport { updateService } from \"./update-service\";\nimport { update } from \"flat-types\";\nimport { gt } from \"semver\";\nimport { CustomWindow } from \"../window-manager/abstract\";\n\nconst windowActionAsync = (customWindow: CustomWindow): ipc.WindowActionAsync => {\n    const { window, options } = customWindow;\n\n    return {\n        \"set-win-size\": args => {\n            // cannot use isMaximized, because after testing, under mac, the return value of this method is always false\n            const isExitMaximized = window.isMaximizable() && !args.maximizable;\n\n            // unmaximize call must precede resizable and maximizable, otherwise it will not take effect\n            if (isExitMaximized) {\n                window.unmaximize();\n                // after exiting the maximization, it must be centered, otherwise the window will be offset to the upper left corner\n                args.autoCenter = true;\n            }\n\n            window.resizable = !!args.resizable;\n            window.maximizable = !!args.maximizable;\n\n            switch (typeof args.setMinimumSize) {\n                case \"undefined\": {\n                    window.setMinimumSize(1, 1);\n                    break;\n                }\n                case \"boolean\": {\n                    window.setMinimumSize(args.width, args.height);\n                    break;\n                }\n                case \"object\": {\n                    window.setMinimumSize(\n                        args.setMinimumSize.minWidth,\n                        args.setMinimumSize.minHeight,\n                    );\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n\n            window.setSize(args.width, args.height);\n\n            if (args.autoCenter) {\n                window.center();\n            }\n        },\n        // TODO: AspectRatio in electron has compatibility issues. Temporarily remove this feature.\n        //  - see: https://github.com/electron/electron/issues/30979\n        //         https://github.com/electron/electron/pull/30989\n        \"set-aspect-ratio\": _args => {\n            // const isReset = args.aspectRatio === 0;\n            //\n            // if (isReset) {\n            //     window.setAspectRatio(args.aspectRatio);\n            // } else {\n            //     window.setAspectRatio(args.aspectRatio, {\n            //         width: 50,\n            //         height: 0,\n            //     });\n            // }\n            //\n            // window.setFullScreenable(isReset);\n        },\n        \"intercept-native-window-close\": args => {\n            options.interceptClose = args.intercept;\n        },\n        \"set-title\": args => {\n            window.setTitle(args.title);\n        },\n        \"force-close-window\": () => {\n            windowManager.remove(customWindow);\n        },\n        \"set-visual-zoom-level\": args => {\n            customWindow.window.webContents\n                .setVisualZoomLevelLimits(args.minimumLevel, args.maximumLevel)\n                .catch(console.error);\n        },\n        \"set-win-status\": args => {\n            switch (args.windowStatus) {\n                case \"minimize\": {\n                    window.minimize();\n                    break;\n                }\n                case \"maximize\": {\n                    if (window.isMaximized()) {\n                        window.unmaximize();\n                    } else {\n                        window.maximize();\n                    }\n                    break;\n                }\n                case \"close\": {\n                    window.close();\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n        },\n    };\n};\n\nexport const appActionAsync: ipc.AppActionAsync = {\n    \"set-open-at-login\": args => {\n        app.setLoginItemSettings({\n            openAtLogin: args.isOpenAtLogin,\n            openAsHidden: false,\n        });\n    },\n    \"set-prevent-sleep\": args =>\n        (() => {\n            let powerSaveBlockerId = 0;\n            return () => {\n                if (args.enable) {\n                    if (!powerSaveBlocker.isStarted(powerSaveBlockerId)) {\n                        powerSaveBlockerId = powerSaveBlocker.start(\"prevent-display-sleep\");\n                    }\n                } else {\n                    if (powerSaveBlocker.isStarted(powerSaveBlockerId)) {\n                        powerSaveBlocker.stop(powerSaveBlockerId);\n                    }\n                }\n            };\n        })(),\n    \"start-update\": args => {\n        updateService.update(args.prereleaseTag);\n    },\n    \"cancel-update\": () => {\n        updateService.cancel();\n    },\n};\n\nexport const appActionSync: ipc.AppActionSync = {\n    \"get-runtime\": () => {\n        return Promise.resolve(runtime);\n    },\n    \"get-open-at-login\": () => {\n        return Promise.resolve(app.getLoginItemSettings().openAtLogin);\n    },\n    \"get-update-info\": async () => {\n        const warpUpdateCheck = async (\n            prereleaseTag: update.PrereleaseTag,\n        ): Promise<update.UpdateCheckInfo> => {\n            return await updateService.check(prereleaseTag).catch((err: Error) => {\n                console.error(err.message);\n                return {\n                    hasNewVersion: false,\n                };\n            });\n        };\n\n        const beta = await warpUpdateCheck(\"beta\");\n        const stable = await warpUpdateCheck(\"stable\");\n\n        if (beta.hasNewVersion && stable.hasNewVersion) {\n            return gt(beta.version, stable.version) ? beta : stable;\n        }\n\n        return beta.hasNewVersion ? beta : stable;\n    },\n    \"can-create-window\": args => {\n        const customWindow = windowManager.windowType(args.windowName);\n\n        // multi instance window type => true\n        // single instance window type + current no window => true\n        const result = customWindow.isMultiInstance || customWindow.isEmpty();\n\n        return Promise.resolve(result);\n    },\n};\n\nexport const injectionWindowIPCAction = (customWindow: CustomWindow): void => {\n    ipcMain.on(\n        customWindow.options.name,\n        (\n            _event,\n            args: {\n                actions: keyof ipc.WindowActionAsync;\n                args: any;\n                browserWindowID: number;\n            },\n        ) => {\n            const realCustomWindow = windowManager\n                .windowType(customWindow.options.name)\n                .getWin(args.browserWindowID);\n\n            if (realCustomWindow) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                windowActionAsync(realCustomWindow)[args.actions](args.args);\n            }\n        },\n    );\n};\n", "import path from \"path\";\nimport { app } from \"electron\";\nimport { platform } from \"os\";\nimport { runtime as Runtime } from \"flat-types\";\n\nconst isDevelopment = process.env.NODE_ENV === \"development\";\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nconst isDebug = process.env.FLAT_DEBUG === \"debug\";\n\nconst assetsPath = isProduction\n    ? path.resolve(__dirname, \"..\", \"static\")\n    : path.resolve(__dirname, \"..\", \"..\", \"..\", \"renderer-app\");\n\nconst startURL = isProduction\n    ? `file://${path.resolve(__dirname, \"..\", \"static\", \"index.html\")}`\n    : \"http://localhost:3000\";\n\nconst isMac = platform() === \"darwin\";\n\nconst isWin = platform() === \"win32\";\n\nconst staticPath = isProduction\n    ? path.join(__dirname, \"..\", \"static\")\n    : path.resolve(__dirname, \"..\", \"..\", \"static\");\n\nconst preloadPath =\n    isProduction || isDebug\n        ? path.join(__dirname, \"preload.js\")\n        : path.resolve(__dirname, \"..\", \"..\", \"dist\", \"preload.js\");\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst appVersion = isProduction ? app.getVersion() : require(\"../../package.json\").version;\n\nconst downloadsDirectory = path.join(app.getPath(\"userData\"), \"downloads\");\n\nconst runtime: Runtime.Type = {\n    isDevelopment,\n    isProduction,\n    startURL,\n    isMac,\n    isWin,\n    staticPath,\n    preloadPath,\n    appVersion,\n    downloadsDirectory,\n    assetsPath,\n};\n\nexport default runtime;\n", "import { autoUpdater, UpdateCheckResult } from \"electron-updater\";\nimport runtime from \"./runtime\";\nimport { ProgressInfo } from \"electron-updater\";\nimport { ipcEmitByMain } from \"./ipc-emit\";\nimport { update } from \"flat-types\";\n\nclass UpdateService {\n    private cancellationToken: UpdateCheckResult[\"cancellationToken\"];\n\n    public check(prereleaseTag: update.PrereleaseTag): Promise<update.UpdateCheckInfo> {\n        autoUpdater.autoDownload = false;\n        UpdateService.setUpdateURL(prereleaseTag);\n\n        return new Promise((resolve, reject) => {\n            const updateAvailable = (info: UpdateCheckResult[\"updateInfo\"]): void => {\n                removeListeners();\n\n                return resolve({\n                    hasNewVersion: true,\n                    version: info.version,\n                    releaseNotes:\n                        typeof info.releaseNotes === \"string\"\n                            ? JSON.parse(info.releaseNotes)\n                            : undefined,\n                    prereleaseTag,\n                });\n            };\n\n            const updateNotAvailable = (): void => {\n                removeListeners();\n                return resolve({\n                    hasNewVersion: false,\n                });\n            };\n\n            const onCheckUpdateResult = (result: UpdateCheckResult | null): void => {\n                if (result) {\n                    updateAvailable(result.updateInfo);\n                } else {\n                    updateNotAvailable();\n                }\n            };\n\n            const error = (err: Error): void => {\n                removeListeners();\n                reject(err);\n            };\n\n            autoUpdater.once(\"update-available\", updateAvailable);\n            autoUpdater.once(\"update-not-available\", updateNotAvailable);\n            autoUpdater.once(\"error\", error);\n\n            const removeListeners = (): void => {\n                autoUpdater.removeListener(\"update-available\", updateAvailable);\n                autoUpdater.removeListener(\"update-not-available\", updateNotAvailable);\n                autoUpdater.removeListener(\"error\", error);\n            };\n\n            autoUpdater\n                .checkForUpdates()\n                .then(onCheckUpdateResult)\n                .catch(err => {\n                    reject(err);\n                });\n        });\n    }\n\n    public update(prereleaseTag: update.PrereleaseTag): void {\n        autoUpdater.autoDownload = true;\n\n        // must be set to false here\n        // because quitAndInstall is also called inside the code. see: https://github.com/electron-userland/electron-builder/blob/29e794d4fa42f8dcb3fafee8c0fa55e9b367de6c/packages/electron-updater/src/MacUpdater.ts#L130-L133\n        // when called multiple times, an error will be triggered:\n        //     Error: The command is disabled and cannot be executed\n        //     domain: 'RACCommandErrorDomain'\n        autoUpdater.autoInstallOnAppQuit = false;\n\n        UpdateService.setUpdateURL(prereleaseTag);\n\n        const updateNotAvailable = (): void => {\n            removeListeners();\n        };\n\n        const downloadProgress = ({\n            total,\n            transferred,\n            percent,\n            bytesPerSecond,\n        }: ProgressInfo): void => {\n            ipcEmitByMain(\"update-progress\", {\n                status: true,\n                total,\n                transferred,\n                percent,\n                bytesPerSecond,\n            });\n        };\n\n        const updateDownloaded = (): void => {\n            removeListeners();\n            autoUpdater.quitAndInstall();\n        };\n\n        const error = (err: Error): void => {\n            removeListeners();\n            console.error(err.message);\n\n            ipcEmitByMain(\"update-progress\", {\n                status: false,\n            });\n        };\n\n        autoUpdater.once(\"update-not-available\", updateNotAvailable);\n        autoUpdater.on(\"download-progress\", downloadProgress);\n        autoUpdater.once(\"update-downloaded\", updateDownloaded);\n        autoUpdater.once(\"error\", error);\n\n        const removeListeners = (): void => {\n            autoUpdater.removeListener(\"update-not-available\", updateNotAvailable);\n            autoUpdater.removeListener(\"download-progress\", downloadProgress);\n            autoUpdater.removeListener(\"update-downloaded\", updateDownloaded);\n            autoUpdater.removeListener(\"error\", error);\n        };\n\n        void autoUpdater\n            .checkForUpdates()\n            .then(d => {\n                this.cancellationToken = d?.cancellationToken;\n            })\n            .catch(error);\n    }\n\n    public cancel(): void {\n        this.cancellationToken?.cancel();\n    }\n\n    private static setUpdateURL(prereleaseTag: update.PrereleaseTag): void {\n        const osName = runtime.isWin ? \"win\" : \"mac\";\n        const updateURL = `${process.env.UPDATE_DOMAIN}/latest/${prereleaseTag}/${osName}`;\n\n        autoUpdater.setFeedURL({\n            provider: \"generic\",\n            url: updateURL,\n            useMultipleRangeRequest: false,\n        });\n    }\n}\n\nexport const updateService = new UpdateService();\n", "import { ipc } from \"flat-types\";\nimport { windowManager } from \"../window-manager\";\nimport runtime from \"./runtime\";\nimport { constants } from \"flat-types\";\nimport { CustomWindow, IsMultiInstance } from \"../window-manager/abstract\";\n\nconst sendIPC = (customWindow: CustomWindow | null, eventName: string, args: any): void => {\n    if (customWindow) {\n        customWindow.window.webContents.send(eventName, args);\n    } else if (runtime.isDevelopment) {\n        throw new Error(\"send ipc failed: window does not exist\");\n    }\n};\n\nexport const ipcEmitByMain: IPCEmit<constants.WindowsName.Main> = (eventName, args): void => {\n    const win = windowManager.windowType(constants.WindowsName.Main).getWin();\n\n    sendIPC(win, eventName, args);\n};\nexport const ipcEmitByShareScreenTip: IPCEmit<constants.WindowsName.ShareScreenTip> = (\n    eventName,\n    args,\n) => {\n    const win = windowManager.windowType(constants.WindowsName.ShareScreenTip).getWin();\n\n    sendIPC(win, eventName, args);\n};\n\nexport const ipcEmit = <NAME extends constants.WindowsName>(windowName: NAME): IPCEmit<NAME> => {\n    switch (windowName) {\n        case constants.WindowsName.Main: {\n            return ipcEmitByMain;\n        }\n        case constants.WindowsName.ShareScreenTip: {\n            return ipcEmitByShareScreenTip;\n        }\n        default: {\n            throw new Error(`not found window name: ${windowName}`);\n        }\n    }\n};\n\ntype IPCEmit<NAME extends constants.WindowsName> = <T extends keyof ipc.EmitEvents>(\n    eventName: T,\n    args: IsMultiInstance<NAME> extends true\n        ? { id: number } & ipc.EmitEvents[T]\n        : ipc.EmitEvents[T],\n) => void;\n", "import { constants, portal } from \"flat-types\";\nimport { BrowserWindowConstructorOptions } from \"electron\";\nimport { WindowStore } from \"./window-store\";\nimport { CustomWindow, AbstractWindows } from \"./abstract\";\nimport { injectionWindowIPCAction } from \"../utils/ipc-actions\";\n\nexport class WindowManager<\n    ABSTRACT_WINDOWS extends AbstractWindows,\n> extends WindowStore<ABSTRACT_WINDOWS> {\n    public constructor(wins: ABSTRACT_WINDOWS) {\n        super(wins);\n    }\n\n    public create<NAME extends constants.WindowsName>(\n        name: NAME,\n        option?: BrowserWindowConstructorOptions,\n    ): CustomWindow {\n        const customWindow = this.wins[name].create(option || {});\n\n        this.interceptPortalNewWindow(customWindow);\n\n        injectionWindowIPCAction(customWindow);\n\n        return customWindow;\n    }\n\n    public remove(customWindow: CustomWindow): void {\n        this.wins[customWindow.options.name].remove(customWindow);\n    }\n\n    private interceptPortalNewWindow(customWindow: CustomWindow): void {\n        customWindow.window.webContents.on(\n            \"new-window\",\n            (event, _url, frameName, _disposition, options) => {\n                if (!frameName.startsWith(constants.Portal)) {\n                    return;\n                }\n\n                event.preventDefault();\n\n                const customOptions: portal.Options = JSON.parse(\n                    frameName.substring(constants.Portal.length),\n                );\n\n                const window = this.create(customOptions.name, options).window;\n\n                event.newGuest = window;\n\n                window.webContents\n                    .executeJavaScript(`window.browserWindowID = ${window.id}`)\n                    .catch(console.error);\n            },\n        );\n    }\n}\n", "import { constants } from \"flat-types\";\nimport { BrowserWindow, BrowserWindowConstructorOptions } from \"electron\";\nimport {\n    windowHookClose,\n    windowHookClosed,\n    windowOpenDevTools,\n    windowReadyToShow,\n} from \"../utils/window-event\";\nimport {\n    defaultBrowserWindowOptions,\n    defaultWindowOptions,\n    WindowOptions,\n} from \"./default-options\";\n\nexport abstract class AbstractWindow<MULTI_INSTANCE extends boolean> {\n    public wins: CustomWindow[] = [];\n\n    public abstract create(option: BrowserWindowConstructorOptions): CustomWindow;\n\n    protected constructor(\n        public readonly isMultiInstance: MULTI_INSTANCE,\n        public readonly name: constants.WindowsName,\n    ) {}\n\n    public remove(id: number | CustomWindow): void {\n        const win = typeof id === \"number\" ? this.getWin(id) : id;\n\n        if (win === null) {\n            return;\n        }\n\n        AbstractWindow.closeWindow(win);\n\n        if (this.isMultiInstance) {\n            this.wins = this.wins.filter(({ window }) => {\n                if (window.isDestroyed()) {\n                    return false;\n                }\n\n                return window.id !== id;\n            });\n\n            return;\n        }\n\n        this.wins = [];\n    }\n\n    protected createWindow(\n        windowOptions: WindowOptions,\n        browserWindowOptions: BrowserWindowConstructorOptions,\n    ): CustomWindow {\n        const window = new BrowserWindow({\n            ...defaultBrowserWindowOptions,\n            ...browserWindowOptions,\n            webPreferences: {\n                ...defaultBrowserWindowOptions.webPreferences,\n                ...browserWindowOptions.webPreferences,\n            },\n        });\n\n        const options = {\n            ...defaultWindowOptions,\n            ...windowOptions,\n        };\n\n        const win = {\n            options,\n            window,\n            didFinishLoad: options.isPortal ? Promise.resolve() : window.loadURL(options.url),\n        };\n\n        if (this.isMultiInstance) {\n            this.wins.push(win);\n        } else {\n            this.wins[0] = win;\n        }\n\n        windowOpenDevTools(win);\n\n        windowHookClose(win);\n        windowHookClosed(win, () => {\n            // sync this.wins\n            this.remove(win);\n        });\n\n        windowReadyToShow(win);\n\n        return win;\n    }\n\n    public getWin(...ids: MULTI_INSTANCE extends true ? [number] : number[]): CustomWindow | null;\n    public getWin(...ids: any[]): CustomWindow | null {\n        if (this.isEmpty()) {\n            return null;\n        }\n\n        if (this.isMultiInstance) {\n            const id = ids[0];\n            for (const win of this.wins) {\n                if (!win.window.isDestroyed() && win.window.id === id) {\n                    return win;\n                }\n            }\n            return null;\n        }\n\n        return this.wins[0].window.isDestroyed() ? null : this.wins[0];\n    }\n\n    public isEmpty(): boolean {\n        return this.wins.length === 0;\n    }\n\n    private static closeWindow(win: CustomWindow): void {\n        if (!win.window.isDestroyed()) {\n            win.options.interceptClose = false;\n            win.window.close();\n        }\n    }\n}\n\nexport type CustomWindow = {\n    window: BrowserWindow;\n    options: WindowOptions;\n    didFinishLoad: Promise<void>;\n};\n\nexport type AbstractWindows = {\n    [constants.WindowsName.Main]: AbstractWindow<false>;\n    [constants.WindowsName.ShareScreenTip]: AbstractWindow<false>;\n    [constants.WindowsName.PreviewFile]: AbstractWindow<true>;\n};\n\n// see: https://stackoverflow.com/questions/67114094/typescript-get-type-of-generic-class-parameter\ntype GetClassParameterForAbstractWindow<T extends AbstractWindow<any>> = T extends AbstractWindow<\n    infer R\n>\n    ? R\n    : unknown;\n\nexport type IsMultiInstance<NAME extends constants.WindowsName> =\n    GetClassParameterForAbstractWindow<AbstractWindows[NAME]>;\n", "import { ipcEmit } from \"./ipc-emit\";\nimport { autoUpdater } from \"electron-updater\";\nimport { CustomWindow } from \"../window-manager/abstract\";\n\nexport const windowHookClose = (customWindow: CustomWindow): void => {\n    customWindow.window.on(\"close\", e => {\n        // see: https://github.com/electron/electron/issues/7792\n        if (!autoUpdater.autoInstallOnAppQuit) {\n            return;\n        }\n\n        if (customWindow.options.interceptClose) {\n            e.preventDefault();\n            ipcEmit(customWindow.options.name)(\"window-will-close\", {});\n        }\n    });\n};\n\nexport const windowHookClosed = (customWindow: CustomWindow, cb: Function): void => {\n    customWindow.window.on(\"closed\", cb);\n};\n\nexport const windowReadyToShow = (customWindow: CustomWindow): void => {\n    customWindow.window.on(\"ready-to-show\", () => {\n        if (customWindow.options.isPortal) {\n            // waiting dom load finish\n            setTimeout(() => {\n                if (!customWindow.window.isDestroyed()) {\n                    customWindow.window.show();\n                }\n            }, 100);\n        } else {\n            customWindow.window.show();\n        }\n    });\n};\n\nexport const windowOpenDevTools = (customWindow: CustomWindow): void => {\n    customWindow.window.webContents.once(\"dom-ready\", () => {\n        // open devTools must be completed after dom ready\n        // link: https://github.com/electron/electron/issues/12438\n        if (customWindow.options.isOpenDevTools) {\n            customWindow.window.webContents.once(\"devtools-opened\", () => {\n                customWindow.window.focus();\n            });\n\n            customWindow.window.webContents.openDevTools();\n        }\n    });\n};\n", "import { BrowserWindowConstructorOptions } from \"electron\";\nimport { constants } from \"flat-types\";\nimport runtime from \"../utils/runtime\";\n\nexport const defaultWindowOptions: Pick<WindowOptions, \"interceptClose\" | \"isOpenDevTools\"> = {\n    interceptClose: false,\n    isOpenDevTools: false,\n};\n\nexport const defaultBrowserWindowOptions: BrowserWindowConstructorOptions = {\n    resizable: false,\n    show: false,\n    fullscreenable: false,\n    maximizable: false,\n    autoHideMenuBar: true,\n    // hidden title bar feature in low version of the Electron not work when the titleBarStyle attributes value is hidden,\n    // but this bug was fixed in new version.\n    // @TODO: remove frame options after upgrade new version of the Electron.\n    frame: runtime.isMac,\n    titleBarStyle: \"hidden\",\n    webPreferences: {\n        autoplayPolicy: \"no-user-gesture-required\",\n        // TODO: set nodeIntegration: false\n        //       This property is very unsafe and we should turn it off as soon as possible\n        //       Need to predict if agora-electron-sdk is supported\n        //       @BlackHole1\n        nodeIntegration: true,\n        contextIsolation: false,\n        webSecurity: false,\n        webviewTag: true,\n        nativeWindowOpen: true,\n        backgroundThrottling: false,\n        nodeIntegrationInSubFrames: false,\n    },\n};\n\nexport interface WindowOptions {\n    url: string;\n    name: constants.WindowsName;\n    interceptClose?: boolean;\n    isOpenDevTools?: boolean;\n    isPortal: boolean;\n}\n", "import { constants } from \"flat-types\";\nimport { AbstractWindow, CustomWindow } from \"../abstract\";\nimport runtime from \"../../utils/runtime\";\nimport { Val, combine } from \"value-enhancer\";\nimport { ipcMain, IpcMainEvent } from \"electron\";\n\nexport class WindowMain extends AbstractWindow<false> {\n    private readonly _mainWindow$ = new Val<CustomWindow | null>(null);\n\n    public constructor() {\n        super(false, constants.WindowsName.Main);\n    }\n\n    public create(): CustomWindow {\n        this.setupDOMReady();\n\n        const customWindow = this.createWindow(\n            {\n                url: runtime.startURL,\n                name: constants.WindowsName.Main,\n                isOpenDevTools: runtime.isDevelopment,\n                isPortal: false,\n            },\n            {\n                center: true,\n                ...constants.PageSize.Main,\n                webPreferences: {\n                    preload: runtime.preloadPath,\n                },\n            },\n        );\n\n        this._mainWindow$.setValue(customWindow);\n\n        // if (process.env.NODE_ENV === \"development\") {\n        //     WindowMain.loadExtensions(customWindow, \"react-devtools\");\n        // }\n\n        return customWindow;\n    }\n\n    public async assertWindow(): Promise<CustomWindow> {\n        return (\n            this._mainWindow$.value ??\n            new Promise<CustomWindow>(resolve => {\n                const disposer = this._mainWindow$.subscribe(win => {\n                    if (win) {\n                        resolve(win);\n                        disposer();\n                    }\n                });\n            })\n        );\n    }\n\n    private static loadExtensions(win: CustomWindow, extensionName: \"react-devtools\"): void {\n        const { REACT_DEVELOPER_TOOLS } = require(\"electron-devtools-vendor\");\n\n        win.window.webContents.session\n            .loadExtension(REACT_DEVELOPER_TOOLS as string, {\n                allowFileAccess: true,\n            })\n            .catch(error => {\n                console.error(\n                    `install ${extensionName} extensions failed! error message: ${error.message}. error stack: ${error.stack}`,\n                );\n            });\n    }\n\n    private setupDOMReady(): void {\n        const domReady$ = new Val<Electron.Event | null>(null);\n        const preloaded$ = new Val<IpcMainEvent | null>(null);\n\n        combine([domReady$, preloaded$]).subscribe(([domReady, event]) => {\n            if (domReady && event) {\n                if (!event.sender.isDestroyed()) {\n                    event.sender.send(\"preload-dom-ready\");\n                }\n            }\n        });\n\n        this._mainWindow$.subscribe(win => {\n            if (win) {\n                win.window.webContents.on(\"dom-ready\", event => {\n                    domReady$.setValue(event);\n                });\n            }\n        });\n\n        ipcMain.on(\"preload-loaded\", (event: IpcMainEvent): void => {\n            const win = this._mainWindow$.value;\n            // preload-load is global event, any window create will trigger,\n            // but we only need Main window event\n            if (win && event.sender.id === win.window.webContents.id) {\n                preloaded$.setValue(event);\n            }\n        });\n    }\n}\n", "import { Display, screen } from \"electron\";\nimport { windowManager } from \"../index\";\nimport { constants } from \"flat-types\";\n\nexport const getDisplayByMainWindow = (): Display => {\n    const mainBounds = windowManager\n        .windowType(constants.WindowsName.Main)\n        .getWin()!\n        .window.getBounds();\n\n    return screen.getDisplayNearestPoint({\n        x: mainBounds.x,\n        y: mainBounds.y,\n    });\n};\n\nexport const getXCenterPoint = (display: Display, windowWidth: number): number => {\n    const { x, width } = display.workArea;\n\n    // see: https://github.com/jenslind/electron-positioner/blob/85bb453453af050dda2479c88c4a24a262f8a2fb/index.js#L74\n    return Math.floor(x + (width / 2 - windowWidth / 2));\n};\n", "import { AbstractWindow, CustomWindow } from \"../abstract\";\nimport { constants } from \"flat-types\";\nimport { getDisplayByMainWindow, getXCenterPoint } from \"./utils\";\n\nexport class WindowShareScreenTip extends AbstractWindow<false> {\n    public constructor() {\n        super(false, constants.WindowsName.ShareScreenTip);\n    }\n\n    public create(options: Electron.BrowserWindowConstructorOptions): CustomWindow {\n        const display = getDisplayByMainWindow();\n\n        const win = this.createWindow(\n            {\n                url: \"\",\n                name: constants.WindowsName.ShareScreenTip,\n                isOpenDevTools: false,\n                isPortal: true,\n                interceptClose: true,\n            },\n            {\n                x: getXCenterPoint(display, constants.PageSize.ShareScreenTip.width),\n                y: display.workArea.y + 32,\n                // this may be a bug in electron\n                // when remove options.webContents will crash\n                // @ts-ignore\n                webContents: options.webContents,\n                ...constants.PageSize.ShareScreenTip,\n                frame: false,\n                // in order to hidden macOS window button, here need to override the titleBarStyle.\n                // see: https://www.electronjs.org/docs/latest/tutorial/window-customization#show-and-hide-the-traffic-lights-programmatically-macos\n                titleBarStyle: \"default\",\n            },\n        );\n\n        // default level is: floating, at this level, other applications can still override this window\n        // so, we used modal-panel level\n        win.window.setAlwaysOnTop(true, \"modal-panel\");\n\n        return win;\n    }\n}\n", "import { AbstractWindow, CustomWindow } from \"../abstract\";\nimport { constants } from \"flat-types\";\n\nexport class WindowPreviewFile extends AbstractWindow<true> {\n    public constructor() {\n        super(true, constants.WindowsName.PreviewFile);\n    }\n\n    public create(options: Electron.BrowserWindowConstructorOptions): CustomWindow {\n        return this.createWindow(\n            {\n                url: \"\",\n                name: constants.WindowsName.PreviewFile,\n                isOpenDevTools: false,\n                isPortal: true,\n            },\n            {\n                ...constants.PageSize.PreviewFile,\n                maximizable: true,\n                fullscreenable: true,\n                resizable: true,\n                // @ts-ignore\n                webContents: options.webContents,\n                // Multi-Window feature methods is too hack that not support communication events between Renderer and Main\n                // so that using default title bar style in here.\n                frame: true,\n                titleBarStyle: \"default\",\n            },\n        );\n    }\n}\n", "import { WindowManager } from \"./window-manager\";\nimport { WindowMain } from \"./window-main\";\nimport { constants } from \"flat-types\";\nimport { WindowShareScreenTip } from \"./window-portal/window-share-screen-tip\";\nimport { WindowPreviewFile } from \"./window-portal/window-preview-file\";\n\nexport const windowManager = new WindowManager({\n    [constants.WindowsName.Main]: new WindowMain(),\n    [constants.WindowsName.ShareScreenTip]: new WindowShareScreenTip(),\n    [constants.WindowsName.PreviewFile]: new WindowPreviewFile(),\n});\n", "import { protocol, session } from \"electron\";\nimport fs from \"fs-extra\";\nimport path from \"path\";\nimport runtime from \"../utils/runtime\";\n\nexport default (): void => {\n    // see: https://github.com/electron/electron/issues/23757\n    protocol.registerFileProtocol(\"file\", (request, callback) => {\n        const pathname = decodeURI(request.url.replace(\"file:///\", \"\"));\n        callback(pathname);\n    });\n\n    const filter = {\n        urls: [\n            \"https://convertcdn.netless.link/*\",\n            \"https://convertcdn-us-sv.netless.link/*\",\n            \"https://convertcdn-gb-lon.netless.link/*\",\n            \"https://convertcdn-sg.netless.link/*\",\n            \"https://convertcdn-in-mum.netless.link/*\",\n        ],\n    };\n\n    session.defaultSession.webRequest.onBeforeRequest(filter, (details, callback) => {\n        const p = details.url.replace(/^https:\\/\\/convertcdn\\S*\\.netless\\.link\\//, \"\");\n        const localPath = path.join(runtime.downloadsDirectory, p);\n\n        if (fs.existsSync(localPath)) {\n            callback({\n                redirectURL: `file://${localPath}`,\n            });\n        } else {\n            callback({});\n        }\n    });\n};\n", "import { app, Menu, MenuItemConstructorOptions } from \"electron\";\nimport runtime from \"../utils/runtime\";\n\nexport default (): void => {\n    const appByMacMenu: IMenu = {\n        label: app.name,\n        submenu: [\n            { role: \"about\" },\n            { type: \"separator\" },\n            { role: \"services\" },\n            { type: \"separator\" },\n            { role: \"hide\" },\n            { role: \"hideOthers\" },\n            { role: \"unhide\" },\n            { type: \"separator\" },\n            { role: \"quit\" },\n        ],\n    };\n\n    const fileMenu: IMenu = {\n        label: \"File\",\n        submenu: [{ role: \"close\" }],\n    };\n    if (runtime.isWin) {\n        fileMenu.submenu = [{ role: \"quit\" }];\n    }\n\n    const editMenu: IMenu = {\n        label: \"Edit\",\n        submenu: [\n            { role: \"undo\" },\n            { role: \"redo\" },\n            { type: \"separator\" },\n            { role: \"cut\" },\n            { role: \"copy\" },\n            { role: \"paste\" },\n        ],\n    };\n    if (runtime.isWin) {\n        editMenu.submenu.push({ role: \"delete\" }, { type: \"separator\" }, { role: \"selectAll\" });\n    } else {\n        editMenu.submenu.push(\n            { role: \"pasteAndMatchStyle\" },\n            { role: \"delete\" },\n            { role: \"selectAll\" },\n            { type: \"separator\" },\n            {\n                label: \"Speech\",\n                submenu: [{ role: \"startSpeaking\" }, { role: \"stopSpeaking\" }],\n            },\n        );\n    }\n\n    const windowMenu: IMenu = {\n        label: \"Window\",\n        submenu: [{ role: \"minimize\" }, { role: \"zoom\" }],\n    };\n    if (runtime.isWin) {\n        windowMenu.submenu.push({ role: \"close\" });\n    } else {\n        windowMenu.submenu.push(\n            { type: \"separator\" },\n            { role: \"front\" },\n            { type: \"separator\" },\n            { role: \"window\" },\n        );\n    }\n\n    const template: MenuItemConstructorOptions[] = [\n        editMenu,\n        fileMenu,\n        {\n            label: \"View\",\n            submenu: [\n                { role: \"reload\" },\n                { role: \"forceReload\" },\n                { role: \"toggleDevTools\" },\n                { type: \"separator\" },\n                { role: \"resetZoom\" },\n                { type: \"separator\" },\n                { role: \"togglefullscreen\" },\n            ],\n        },\n        windowMenu,\n    ];\n\n    if (runtime.isMac) {\n        template.unshift(appByMacMenu);\n    }\n\n    const menu = Menu.buildFromTemplate(template);\n    Menu.setApplicationMenu(menu);\n};\n\ntype IMenu = {\n    label: string;\n    submenu: MenuItemConstructorOptions[];\n};\n", "import { appActionAsync, appActionSync } from \"../utils/ipc-actions\";\nimport { ipc } from \"flat-types\";\nimport { ipcMain } from \"electron\";\n\nexport default (): void => {\n    const appActionAsyncKeys = Object.keys(appActionAsync) as Array<keyof ipc.AppActionAsync>;\n    appActionAsyncKeys.forEach(k => {\n        ipcMain.on(k, (_event, args: any) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            appActionAsync[k](args);\n        });\n    });\n\n    const appActionSyncKeys = Object.keys(appActionSync) as Array<keyof ipc.AppActionSync>;\n    appActionSyncKeys.forEach(k => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        ipcMain.handle(k, (_event, args) => appActionSync[k](args));\n    });\n};\n", "import { app } from \"electron\";\nimport closeAPP from \"../utils/close-app\";\n\nexport default (): void => {\n    const windowAllClosed = (): void => {\n        app.on(\"window-all-closed\", () => {\n            closeAPP();\n        });\n    };\n\n    const appQuit = (): void => {\n        app.on(\"quit\", () => {\n            closeAPP();\n        });\n    };\n\n    // Does not require sequential execution\n    // Just to avoid local variables polluting Context variables\n    [windowAllClosed, appQuit].forEach(f => {\n        f();\n    });\n};\n", "import { app } from \"electron\";\n\nconst closeAPP = (): void => {\n    app.exit(0);\n};\n\nexport default closeAPP;\n", "import { session } from \"electron\";\n\nexport default (): void => {\n    // fix electron bug\n    // turn off annoying warnings\n    // see: https://github.com/electron/electron/issues/13008#issuecomment-575909942\n    const redirectURL =\n        \"data:application/x-javascript;base64,UHJvZHVjdFJlZ2lzdHJ5SW1wbC5SZWdpc3RyeT1jbGFzc3tjb25zdHJ1Y3Rvcigpe31uYW1lRm9yVXJsKHIpe3JldHVybiBudWxsfWVudHJ5Rm9yVXJsKHIpe3JldHVybiBudWxsfXR5cGVGb3JVcmwocil7cmV0dXJuIG51bGx9fSxQcm9kdWN0UmVnaXN0cnlJbXBsLl9oYXNoRm9yRG9tYWluPWZ1bmN0aW9uKHIpe3JldHVybiIifSxQcm9kdWN0UmVnaXN0cnlJbXBsLnJlZ2lzdGVyPWZ1bmN0aW9uKHIsdCl7UHJvZHVjdFJlZ2lzdHJ5SW1wbC5fcHJvZHVjdHNCeURvbWFpbkhhc2g9bmV3IE1hcH0sUHJvZHVjdFJlZ2lzdHJ5SW1wbC5fcHJvZHVjdHNCeURvbWFpbkhhc2g9bmV3IE1hcCxQcm9kdWN0UmVnaXN0cnlJbXBsLnJlZ2lzdGVyKFtdLFtdKSxQcm9kdWN0UmVnaXN0cnlJbXBsLnNoYTE9ZnVuY3Rpb24ocil7cmV0dXJuIiJ9Ow==\";\n    session.defaultSession.webRequest.onBeforeRequest((details, callback) => {\n        if (\n            /^devtools:\\/\\/devtools\\/remote\\/serve_file\\/@[0-9a-f]{40}\\/product_registry_impl\\/product_registry_impl_module.js$/iu.test(\n                details.url,\n            )\n        ) {\n            callback({\n                redirectURL,\n            });\n            return;\n        }\n        callback({});\n    });\n};\n", "import runtime from \"../utils/runtime\";\nimport { app } from \"electron\";\nimport closeAPP from \"../utils/close-app\";\nimport { windowManager } from \"../window-manager\";\nimport { constants } from \"flat-types\";\nimport { CustomWindow } from \"../window-manager/abstract\";\n\nexport default async (): Promise<void> => {\n    const protocol = new URLProtocolHandler({\n        active: () => {\n            // nothing...\n        },\n        joinRoom: (args, innerWindow) => {\n            if (args.has(\"roomUUID\")) {\n                innerWindow.window.webContents.send(\"request-join-room\", {\n                    roomUUID: args.get(\"roomUUID\"),\n                });\n            }\n        },\n    });\n\n    if (runtime.isMac) {\n        app.on(\"open-url\", (event, url) => {\n            event.preventDefault();\n\n            protocol.execute(url);\n        });\n    }\n\n    // requestSingleInstanceLock must be called after ready\n    await app.whenReady();\n\n    if (runtime.isWin) {\n        // in any case, this must be called, otherwise second-instance will not be triggered\n        const lock = app.requestSingleInstanceLock();\n\n        const url = process.argv.slice().pop()!;\n\n        // act of opening by url protocol should not launch a new app (except for the first open)\n        if (url.startsWith(\"x-agora-flat-client://\") && !lock) {\n            return closeAPP();\n        }\n\n        protocol.execute(url);\n\n        app.on(\"second-instance\", (_event, command) => {\n            protocol.execute(command.pop()!);\n        });\n    }\n};\n\nclass URLProtocolHandler {\n    public readonly handlers: ActionHandler;\n\n    public constructor(handlers: ActionHandler) {\n        this.handlers = Object.freeze(handlers);\n    }\n\n    public execute(url: string): void {\n        const actionInfo = this.getActionInfo(url);\n\n        if (actionInfo) {\n            URLProtocolHandler.focus()\n                .then(innerWindow => {\n                    this.handlers[actionInfo.name](actionInfo.args, innerWindow);\n                })\n                .catch(() => {\n                    // nothing..\n                });\n        }\n    }\n\n    private static async focus(): Promise<CustomWindow> {\n        const innerWindow = await windowManager\n            .windowType(constants.WindowsName.Main)\n            .assertWindow();\n\n        const mainWindow = innerWindow.window;\n\n        if (mainWindow) {\n            if (mainWindow.isMinimized()) {\n                mainWindow.restore();\n            }\n            mainWindow.focus();\n        }\n\n        return innerWindow.didFinishLoad.then(() => innerWindow);\n    }\n\n    private getActionInfo(url: string): ActionInfo {\n        try {\n            const data = new URL(url);\n            const actionName = data.hostname as ActionNames;\n\n            if (!this.handlers[actionName]) {\n                return null;\n            }\n\n            return {\n                name: actionName,\n                args: data.searchParams,\n            };\n        } catch (_err) {\n            return null;\n        }\n    }\n}\n\ntype ActionNames = \"active\" | \"joinRoom\";\ntype ActionHandler = {\n    [key in ActionNames]: (arg: URLSearchParams, innerWindow: CustomWindow) => void;\n};\ntype ActionInfo = {\n    name: ActionNames;\n    args: URLSearchParams;\n} | null;\n", "import bootstrap from \"./utils/bootup-flow\";\nimport initEnv from \"./bootup/init-env\";\nimport initWindow from \"./bootup/init-window\";\nimport initWebRequest from \"./bootup/init-webRequest\";\nimport initMenus from \"./bootup/init-menus\";\nimport intAppIPC from \"./bootup/init-app-ipc\";\nimport initAppListen from \"./bootup/init-app-listener\";\nimport initOtherListeners from \"./bootup/init-other\";\nimport initURLProtocol from \"./bootup/init-url-protocol\";\n\nvoid bootstrap([\n    initEnv,\n    initURLProtocol,\n    intAppIPC,\n    initWindow,\n    initMenus,\n    initAppListen,\n    initOtherListeners,\n    initWebRequest,\n]);\n"],
  "mappings": "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",
  "names": ["import_electron", "WindowsName", "import_electron", "import_electron", "path", "import_electron", "import_electron_updater", "import_electron", "import_electron", "import_electron", "import_path", "path", "fs", "import_electron", "import_electron", "import_electron", "import_electron", "import_electron", "import_electron", "protocol"]
}
