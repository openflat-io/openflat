{"version":3,"file":"index.a46b16f7.js","sources":["../../../packages/flat-services/src/services/video-chat/share-screen.ts","../../../packages/flat-services/src/services/video-chat/video-chat.ts","../../../service-providers/agora-rtc/agora-rtc-electron/src/constants.ts","../../../service-providers/agora-rtc/agora-rtc-electron/src/rtc-remote-avatar.ts","../../../service-providers/agora-rtc/agora-rtc-electron/src/rtc-local-avatar.ts","../../../service-providers/agora-rtc/agora-rtc-electron/src/rtc-share-screen.ts","../../../service-providers/agora-rtc/agora-rtc-electron/src/agora-rtc-electron.ts"],"sourcesContent":["import { Remitter } from \"remitter\";\n\nexport type IServiceShareScreenUID = string;\n\nexport interface IServiceShareScreenData {\n    /** When user has published local screen track. */\n    \"local-changed\": boolean;\n    /** When someone else has published screen track. */\n    \"remote-changed\": boolean;\n    /** When enable() failed. */\n    \"err-enable\": Error;\n}\n\nexport interface IServiceShareScreenParams {\n    uid: IServiceShareScreenUID;\n    token: string;\n    roomUUID: string;\n}\n\nexport abstract class IServiceShareScreen {\n    public readonly events = new Remitter<IServiceShareScreenData>();\n\n    public abstract setParams(params: IServiceShareScreenParams | null): void;\n    public abstract enable(enabled: boolean): void;\n    public abstract setElement(element: HTMLElement | null): void;\n\n    public getScreenInfo(): Promise<IServiceShareScreenInfo[]> {\n        throw doesNotSupportError(\"screen info\");\n    }\n\n    public setScreenInfo(_info: IServiceShareScreenInfo | null): void {\n        throw doesNotSupportError(\"screen info\");\n    }\n\n    public async destroy(): Promise<void> {\n        this.events.destroy();\n    }\n}\n\n// @TODO\n// Only used in electron.\nexport interface IServiceShareScreenInfo {\n    type: \"display\" | \"window\";\n    screenId: number | { id: number };\n    name: string;\n    image: Uint8Array;\n    width: number;\n    height: number;\n}\n\nfunction doesNotSupportError(type: string): Error {\n    return new Error(`Does not support ${type}`);\n}\n","import { Remitter } from \"remitter\";\nimport { SideEffectManager } from \"side-effect-manager\";\nimport { IService } from \"../typing\";\nimport { IServiceVideoChatMode, IServiceVideoChatRole } from \"./constants\";\nimport { IServiceVideoChatEventData } from \"./events\";\nimport { IServiceShareScreen } from \"./share-screen\";\n\nexport type IServiceVideoChatUID = string;\n\nexport interface IServiceVideoChatDevice {\n    deviceId: string;\n    label: string;\n}\n\nexport interface IServiceVideoChatAvatar {\n    enableCamera(enabled: boolean): void;\n    enableMic(enabled: boolean): void;\n    setElement(element: HTMLElement | null): void;\n    getVolumeLevel(): number;\n    destroy(): void;\n}\n\nexport interface IServiceVideoChatJoinRoomConfig {\n    roomUUID: string;\n    uid: IServiceVideoChatUID;\n    mode?: IServiceVideoChatMode;\n    role?: IServiceVideoChatRole;\n    token?: string | null;\n    refreshToken?: (roomUUID: string) => Promise<string>;\n    shareScreenUID: IServiceVideoChatUID;\n    shareScreenToken: string;\n}\n\nexport abstract class IServiceVideoChat implements IService {\n    protected readonly sideEffect = new SideEffectManager();\n\n    public readonly events = new Remitter<IServiceVideoChatEventData>();\n\n    public abstract readonly isJoinedRoom: boolean;\n\n    // @TODO move share screen to separate service\n    public abstract readonly shareScreen: IServiceShareScreen;\n\n    public async destroy(): Promise<void> {\n        this.sideEffect.flushAll();\n        this.events.destroy();\n    }\n\n    public abstract joinRoom(config: IServiceVideoChatJoinRoomConfig): Promise<void>;\n    public abstract leaveRoom(): Promise<void>;\n\n    public abstract setRole(role: IServiceVideoChatRole): Promise<void>;\n\n    /** @returns local avatar if uid is not provided, throws error if uid == shareScreenUID */\n    public abstract getAvatar(uid?: IServiceVideoChatUID): IServiceVideoChatAvatar | undefined;\n\n    public abstract getTestAvatar(): IServiceVideoChatAvatar;\n\n    public abstract getVolumeLevel(uid?: IServiceVideoChatUID): number;\n\n    public abstract setCameraID(deviceId: string): Promise<void>;\n    public abstract getCameraID(): string | undefined;\n\n    public abstract setMicID(deviceId: string): Promise<void>;\n    public abstract getMicID(): string | undefined;\n\n    public abstract setSpeakerID(deviceId: string): Promise<void>;\n    public abstract getSpeakerID(): string | undefined;\n\n    public abstract getCameraDevices(): Promise<IServiceVideoChatDevice[]>;\n    public abstract getMicDevices(): Promise<IServiceVideoChatDevice[]>;\n    public abstract getSpeakerDevices(): Promise<IServiceVideoChatDevice[]>;\n\n    /** @returns volume 0~1 */\n    public abstract getSpeakerVolume(): number;\n\n    public async setSpeakerVolume(_volume: number): Promise<void> {\n        throw doesNotSupportError(\"setting speaker volume\");\n    }\n\n    public startNetworkTest(): void {\n        throw doesNotSupportError(\"network probe test\");\n    }\n\n    public stopNetworkTest(): void {\n        throw doesNotSupportError(\"network probe test\");\n    }\n\n    public startCameraTest(_el: HTMLElement): void {\n        throw doesNotSupportError(\"camera test\");\n    }\n\n    public stopCameraTest(): void {\n        throw doesNotSupportError(\"camera test\");\n    }\n\n    public startMicTest(): void {\n        throw doesNotSupportError(\"microphone test\");\n    }\n\n    public stopMicTest(): void {\n        throw doesNotSupportError(\"microphone test\");\n    }\n\n    public startSpeakerTest(_filePath: string): void {\n        throw doesNotSupportError(\"speaker test\");\n    }\n\n    public stopSpeakerTest(): void {\n        throw doesNotSupportError(\"speaker test\");\n    }\n}\n\nfunction doesNotSupportError(type: string): Error {\n    return new Error(`Does not support ${type}`);\n}\n","export enum FlatRTCAgoraElectronMode {\n    Communication = 0,\n    Broadcast = 1,\n    Gaming = 2,\n}\n\nexport enum FlatRTCAgoraElectronRole {\n    Host = 1,\n    Audience = 2,\n}\n","import { SideEffectManager } from \"side-effect-manager\";\nimport { combine, Val } from \"value-enhancer\";\nimport type { IServiceVideoChatAvatar, IServiceVideoChatUID } from \"@netless/flat-services\";\nimport type { AgoraRTCElectron } from \"./agora-rtc-electron\";\n\nexport interface RTCRemoteAvatarConfig {\n    rtc: AgoraRTCElectron;\n    uid: IServiceVideoChatUID;\n    element?: HTMLElement | null;\n}\n\nexport class RTCRemoteAvatar implements IServiceVideoChatAvatar {\n    private readonly uid: IServiceVideoChatUID;\n    private readonly _rtc: AgoraRTCElectron;\n    private readonly _sideEffect = new SideEffectManager();\n\n    private readonly _active$ = new Val(false);\n\n    private readonly _shouldCamera$ = new Val(false);\n    private readonly _shouldMic$ = new Val(false);\n\n    private readonly _el$: Val<HTMLElement | undefined | null>;\n\n    public setActive(active: boolean): void {\n        this._active$.setValue(active);\n    }\n\n    public enableCamera(enabled: boolean): void {\n        this._shouldCamera$.setValue(enabled);\n    }\n\n    public enableMic(enabled: boolean): void {\n        this._shouldMic$.setValue(enabled);\n    }\n\n    public setElement(el: HTMLElement | null): void {\n        this._el$.setValue(el);\n    }\n\n    public getVolumeLevel(): number {\n        return this._rtc.getVolumeLevel(this.uid) || 0;\n    }\n\n    public constructor(config: RTCRemoteAvatarConfig) {\n        this._rtc = config.rtc;\n        this._el$ = new Val(config.element);\n        this.uid = config.uid;\n\n        this._sideEffect.addDisposer(\n            combine([this._el$, this._active$]).subscribe(([el, active]) => {\n                if (el && active) {\n                    try {\n                        this._rtc.rtcEngine.setupRemoteVideo(Number(this.uid), el);\n                    } catch (e) {\n                        console.error(e);\n                    }\n                }\n            }),\n        );\n\n        this._sideEffect.addDisposer(\n            combine([this._el$, this._active$, this._shouldMic$]).subscribe(\n                ([el, active, shouldMic]) => {\n                    try {\n                        this._rtc.rtcEngine.muteRemoteAudioStream(\n                            Number(this.uid),\n                            !(el && active && shouldMic),\n                        );\n                    } catch (e) {\n                        console.error(e);\n                    }\n                },\n            ),\n        );\n\n        this._sideEffect.addDisposer(\n            combine([this._el$, this._active$, this._shouldCamera$]).subscribe(\n                ([el, active, shouldCamera]) => {\n                    try {\n                        this._rtc.rtcEngine.muteRemoteVideoStream(\n                            Number(this.uid),\n                            !(el && active && shouldCamera),\n                        );\n                    } catch (e) {\n                        console.error(e);\n                    }\n                },\n            ),\n        );\n\n        this._sideEffect.addDisposer(() => {\n            this._active$.setValue(false);\n        });\n    }\n\n    public destroy(): void {\n        this._sideEffect.flushAll();\n    }\n}\n","import { SideEffectManager } from \"side-effect-manager\";\nimport { Val } from \"value-enhancer\";\nimport { IServiceVideoChatAvatar, IServiceVideoChatRole } from \"@netless/flat-services\";\nimport type { AgoraRTCElectron } from \"./agora-rtc-electron\";\n\nexport interface RTCAvatarConfig {\n    rtc: AgoraRTCElectron;\n    element?: HTMLElement | null;\n}\n\nexport class RTCLocalAvatar implements IServiceVideoChatAvatar {\n    private readonly _rtc: AgoraRTCElectron;\n    private readonly _sideEffect = new SideEffectManager();\n\n    private readonly _shouldCamera$ = new Val(false);\n    private readonly _shouldMic$ = new Val(false);\n\n    private readonly _el$: Val<HTMLElement | undefined | null>;\n\n    public enableCamera(enabled: boolean): void {\n        this._shouldCamera$.setValue(enabled);\n    }\n\n    public enableMic(enabled: boolean): void {\n        this._shouldMic$.setValue(enabled);\n    }\n\n    public setElement(el: HTMLElement | null): void {\n        this._el$.setValue(el);\n    }\n\n    public getVolumeLevel(): number {\n        return this._rtc.getVolumeLevel() || 0;\n    }\n\n    public constructor(config: RTCAvatarConfig) {\n        this._rtc = config.rtc;\n        this._el$ = new Val(config.element);\n\n        this._sideEffect.addDisposer(\n            this._el$.subscribe(el => {\n                try {\n                    if (el) {\n                        if (this._shouldCamera$.value || this._shouldMic$.value) {\n                            this._rtc.setRole(IServiceVideoChatRole.Host);\n                        }\n                        this._rtc.rtcEngine.setupLocalVideo(el);\n                        this._rtc.rtcEngine.enableLocalAudio(this._shouldMic$.value);\n                        this._rtc.rtcEngine.enableLocalVideo(this._shouldCamera$.value);\n                    } else {\n                        this._rtc.rtcEngine.enableLocalAudio(false);\n                        this._rtc.rtcEngine.enableLocalVideo(false);\n                        this._rtc.setRole(IServiceVideoChatRole.Audience);\n                    }\n                } catch (e) {\n                    console.error(e);\n                }\n            }),\n        );\n\n        this._sideEffect.addDisposer(\n            this._shouldMic$.reaction(shouldMic => {\n                if (this._el$.value) {\n                    try {\n                        if (shouldMic) {\n                            this._rtc.setRole(IServiceVideoChatRole.Host);\n                            this._rtc.rtcEngine.enableLocalAudio(true);\n                        } else {\n                            this._rtc.rtcEngine.enableLocalAudio(false);\n                            if (!this._shouldCamera$.value) {\n                                this._rtc.setRole(IServiceVideoChatRole.Audience);\n                            }\n                        }\n                    } catch (e) {\n                        console.error(e);\n                    }\n                }\n            }),\n        );\n\n        this._sideEffect.addDisposer(\n            this._shouldCamera$.reaction(shouldCamera => {\n                if (this._el$.value) {\n                    try {\n                        if (shouldCamera) {\n                            this._rtc.setRole(IServiceVideoChatRole.Host);\n                            this._rtc.rtcEngine.enableLocalVideo(true);\n                        } else {\n                            this._rtc.rtcEngine.enableLocalVideo(false);\n                            if (!this._shouldMic$.value) {\n                                this._rtc.setRole(IServiceVideoChatRole.Audience);\n                            }\n                        }\n                    } catch (e) {\n                        console.error(e);\n                    }\n                }\n            }),\n        );\n\n        this._sideEffect.addDisposer(() => {\n            this._rtc.rtcEngine.enableLocalVideo(false);\n            this._rtc.rtcEngine.enableLocalAudio(false);\n            this._el$.setValue(null);\n        });\n    }\n\n    public destroy(): void {\n        this._sideEffect.flushAll();\n    }\n}\n","import {\n    IServiceShareScreen,\n    IServiceShareScreenInfo,\n    IServiceShareScreenParams,\n} from \"@netless/flat-services\";\nimport type AgoraRtcEngine from \"agora-electron-sdk\";\nimport type {\n    DisplayInfo,\n    ScreenSymbol,\n    WindowInfo,\n} from \"agora-electron-sdk/types/Api/native_type\";\n\nimport { SideEffectManager } from \"side-effect-manager\";\nimport { combine, Val } from \"value-enhancer\";\nimport type { AgoraRTCElectron } from \"./agora-rtc-electron\";\n\nconst rect = { x: 0, y: 0, width: 0, height: 0 };\n\nconst videoSourceParams = {\n    width: 0,\n    height: 0,\n    bitrate: 0,\n    frameRate: 15,\n    captureMouseCursor: true,\n    windowFocus: false,\n    excludeWindowList: [],\n    excludeWindowCount: 0,\n};\n\nexport interface AgoraRTCElectronShareScreenAvatarConfig {\n    rtc: AgoraRTCElectron;\n    element?: HTMLElement | null;\n}\n\nexport class AgoraRTCElectronShareScreen extends IServiceShareScreen {\n    private readonly _rtc: AgoraRTCElectron;\n    private readonly _sideEffect = new SideEffectManager();\n\n    private readonly _params$ = new Val<IServiceShareScreenParams | null>(null);\n    private readonly _enabled$ = new Val(false);\n\n    private readonly _active$ = new Val(false);\n    private readonly _el$: Val<HTMLElement | null>;\n\n    private readonly _screenInfo$ = new Val<IServiceShareScreenInfo | null>(null);\n\n    public constructor(config: AgoraRTCElectronShareScreenAvatarConfig) {\n        super();\n\n        this._rtc = config.rtc;\n        this._el$ = new Val(config.element ?? null);\n\n        this._sideEffect.addDisposer(\n            combine([this._active$, this._params$, this._el$]).subscribe(([active, params, el]) => {\n                if (el && params) {\n                    const uid = Number(params.uid);\n                    try {\n                        if (active) {\n                            // this is a bug in agora SDK, when the `desktop` screen sharing is done,\n                            // and then the `web` side does the screen sharing,\n                            // the `desktop` will have a black screen.\n                            // this is because the SDK has `mute` the remote screen sharing stream\n                            this.client.muteRemoteVideoStream(uid, false);\n                            this.client.setupRemoteVideo(uid, el);\n                            this.client.setupViewContentMode(uid, 1, undefined);\n                        } else {\n                            this.client.destroyRender(uid, undefined);\n                            this.client.destroyRenderView(uid, undefined, el);\n                        }\n                        this.events.emit(\"remote-changed\", active);\n                    } catch (e) {\n                        console.error(e);\n                    }\n                }\n                this.events.emit(\"remote-changed\", active);\n            }),\n        );\n\n        this._sideEffect.addDisposer(\n            combine([this._screenInfo$, this._enabled$]).subscribe(\n                async ([screenInfo, enabled]) => {\n                    try {\n                        if (screenInfo && enabled) {\n                            await this.enableShareScreen(screenInfo);\n                        } else {\n                            await this.disableShareScreen();\n                        }\n                        this.events.emit(\"local-changed\", enabled);\n                    } catch (e) {\n                        this.events.emit(\"err-enable\", e);\n                    }\n                },\n            ),\n        );\n    }\n\n    public get client(): AgoraRtcEngine {\n        return this._rtc.rtcEngine;\n    }\n\n    public shouldSubscribeRemoteTrack(): boolean {\n        return !this._enabled$.value;\n    }\n\n    public setActive(active: boolean): void {\n        this._active$.setValue(active);\n    }\n\n    public setParams(params: IServiceShareScreenParams | null): void {\n        this._params$.setValue(params);\n    }\n\n    public override async getScreenInfo(): Promise<IServiceShareScreenInfo[]> {\n        await new Promise(resolve => setTimeout(resolve, 100));\n\n        const displayList = await new Promise<DisplayInfo[]>(res =>\n            this.client.getScreenDisplaysInfo(res),\n        );\n        const windowList = await new Promise<WindowInfo[]>(res =>\n            this.client.getScreenWindowsInfo(res),\n        );\n\n        const convertScreenInfo = (\n            info: DisplayInfo | WindowInfo,\n        ): IServiceShareScreenInfo | null => {\n            // There's a bug in agora SDK, the image may be missing on mirrored screen\n            if (!info.image) {\n                return null;\n            }\n            if (\"displayId\" in info) {\n                return {\n                    type: \"display\",\n                    screenId: info.displayId,\n                    name: \"Desktop\",\n                    image: info.image,\n                    width: info.width,\n                    height: info.height,\n                };\n            } else {\n                return {\n                    type: \"window\",\n                    screenId: info.windowId,\n                    name: `${info.ownerName} - ${info.name}`,\n                    image: info.image,\n                    // There's no other way to get the original window size :/\n                    width: info.originWidth,\n                    height: info.originHeight,\n                };\n            }\n        };\n\n        return compact([\n            ...displayList.map(convertScreenInfo),\n            ...windowList.map(convertScreenInfo),\n        ]);\n    }\n\n    public override setScreenInfo(info: IServiceShareScreenInfo | null): void {\n        this._screenInfo$.setValue(info);\n    }\n\n    public enable(enabled: boolean): void {\n        if (this._el$.value && this._active$.value) {\n            throw new Error(\"There already exists remote screen track.\");\n        }\n        this._enabled$.setValue(enabled);\n    }\n\n    public setElement(element: HTMLElement | null): void {\n        this._el$.setValue(element);\n    }\n\n    public override async destroy(): Promise<void> {\n        super.destroy();\n        this._sideEffect.flushAll();\n    }\n\n    private _pTogglingShareScreen?: Promise<unknown>;\n    private _lastEnabled = false;\n\n    public async enableShareScreen(screenInfo: IServiceShareScreenInfo): Promise<void> {\n        if (!this._params$.value) {\n            throw new Error(\"Should call joinRoom() before share screen.\");\n        }\n\n        if (this._lastEnabled === true) {\n            return;\n        }\n        this._lastEnabled = true;\n\n        if (this._pTogglingShareScreen) {\n            await this._pTogglingShareScreen;\n        }\n\n        const { roomUUID, token, uid } = this._params$.value;\n\n        this._pTogglingShareScreen = new Promise<void>(resolve => {\n            this.client.once(\"videoSourceJoinedSuccess\", () => {\n                this.client.videoSourceSetVideoProfile(43, false);\n                if (screenInfo.type === \"display\") {\n                    this.client.videoSourceStartScreenCaptureByScreen(\n                        screenInfo.screenId as ScreenSymbol,\n                        rect,\n                        videoSourceParams,\n                    );\n                } else {\n                    this.client.videoSourceStartScreenCaptureByWindow(\n                        screenInfo.screenId as number,\n                        rect,\n                        videoSourceParams,\n                    );\n                }\n                resolve();\n            });\n            this.client.videoSourceInitialize(this._rtc.APP_ID);\n            this.client.videoSourceSetChannelProfile(1);\n            this.client.videoSourceJoin(token, roomUUID, \"\", Number(uid));\n        });\n        await this._pTogglingShareScreen;\n        this._pTogglingShareScreen = undefined;\n    }\n\n    public async disableShareScreen(): Promise<void> {\n        if (this._pTogglingShareScreen) {\n            await this._pTogglingShareScreen;\n        }\n\n        if (this._lastEnabled === false) {\n            return;\n        }\n        this._lastEnabled = false;\n\n        this._pTogglingShareScreen = new Promise<void>(resolve => {\n            this.client.once(\"videoSourceLeaveChannel\", () => {\n                this.client.videoSourceRelease();\n                resolve();\n            });\n            this.client.videoSourceLeave();\n        });\n        await this._pTogglingShareScreen;\n        this._pTogglingShareScreen = undefined;\n    }\n}\n\ntype Truthy<T> = T extends false | \"\" | 0 | null | undefined ? never : T;\n\nfunction compact<T>(arr: T[]): Array<Truthy<T>> {\n    return arr.filter(Boolean) as Array<Truthy<T>>;\n}\n","import type AgoraSdk from \"agora-electron-sdk\";\nimport type { AgoraNetworkQuality, RtcStats } from \"agora-electron-sdk/types/Api/native_type\";\nimport {\n    IServiceVideoChat,\n    IServiceVideoChatAvatar,\n    IServiceVideoChatDevice,\n    IServiceVideoChatJoinRoomConfig,\n    IServiceVideoChatMode,\n    IServiceVideoChatNetworkQualityType,\n    IServiceVideoChatRole,\n    IServiceVideoChatUID,\n} from \"@netless/flat-services\";\nimport { SideEffectManager } from \"side-effect-manager\";\nimport { RTCRemoteAvatar } from \"./rtc-remote-avatar\";\nimport { RTCLocalAvatar } from \"./rtc-local-avatar\";\nimport { AgoraRTCElectronShareScreen } from \"./rtc-share-screen\";\n\nexport interface FlatRTCAgoraElectronDevice {\n    devicename: string;\n    deviceid: string;\n}\n\nexport interface AgoraRTCElectronConfig {\n    APP_ID: string;\n    rtcEngine: AgoraSdk;\n}\n\nexport class AgoraRTCElectron extends IServiceVideoChat {\n    private static LOW_VOLUME_LEVEL_THRESHOLD = 0.00001;\n\n    public readonly shareScreen = new AgoraRTCElectronShareScreen({ rtc: this });\n\n    public readonly APP_ID: string;\n    public readonly rtcEngine: AgoraSdk;\n\n    private readonly _roomSideEffect = new SideEffectManager();\n\n    private _cameraID?: string;\n    private _micID?: string;\n    private _speakerID?: string;\n\n    private uid?: IServiceVideoChatUID;\n    private roomUUID?: string;\n    private mode?: IServiceVideoChatMode;\n\n    public shareScreenUID?: IServiceVideoChatUID;\n\n    private _volumeLevels = new Map<IServiceVideoChatUID, number>();\n\n    private _remoteAvatars = new Map<IServiceVideoChatUID, RTCRemoteAvatar>();\n\n    public get remoteAvatars(): IServiceVideoChatAvatar[] {\n        return [...this._remoteAvatars.values()];\n    }\n\n    private _localAvatar?: RTCLocalAvatar;\n    public get localAvatar(): IServiceVideoChatAvatar {\n        return (this._localAvatar ??= new RTCLocalAvatar({ rtc: this }));\n    }\n\n    public get isJoinedRoom(): boolean {\n        return Boolean(this.roomUUID);\n    }\n\n    public setRTCEngine(rtcEngine: AgoraSdk): void {\n        (this.rtcEngine as AgoraSdk) = rtcEngine;\n        this._init(rtcEngine);\n    }\n\n    public constructor(config: AgoraRTCElectronConfig) {\n        super();\n        this.APP_ID = config.APP_ID;\n        this.rtcEngine = config.rtcEngine;\n        this._init(this.rtcEngine);\n    }\n\n    private _init(rtcEngine: AgoraSdk): void {\n        this.sideEffect.add(() => {\n            const getSpeakerID = (): string | undefined => {\n                try {\n                    return (rtcEngine.getCurrentAudioPlaybackDevice() as FlatRTCAgoraElectronDevice)\n                        ?.deviceid;\n                } catch (e) {\n                    console.error(e);\n                    return;\n                }\n            };\n\n            const getMicID = (): string | undefined => {\n                try {\n                    return (\n                        rtcEngine.getCurrentAudioRecordingDevice() as FlatRTCAgoraElectronDevice\n                    )?.deviceid;\n                } catch (e) {\n                    console.error(e);\n                    return;\n                }\n            };\n\n            const getCameraID = (): string | undefined => {\n                try {\n                    return (rtcEngine.getCurrentVideoDevice() as FlatRTCAgoraElectronDevice)\n                        ?.deviceid;\n                } catch (e) {\n                    console.error(e);\n                    return;\n                }\n            };\n\n            this._cameraID = getCameraID();\n            this._micID = getMicID();\n            this._speakerID = getSpeakerID();\n\n            const onAudioDeviceStateChanged = (): void => {\n                const micID = getMicID();\n                const speakerID = getSpeakerID();\n                if (micID) {\n                    this.setMicID(micID);\n                }\n                if (speakerID) {\n                    this.setSpeakerID(speakerID);\n                }\n            };\n\n            const onVideoDeviceStateChanged = (): void => {\n                const cameraID = getCameraID();\n                if (cameraID) {\n                    this.setCameraID(cameraID);\n                }\n            };\n\n            rtcEngine.on(\"audioDeviceStateChanged\", onAudioDeviceStateChanged);\n            rtcEngine.on(\"videoDeviceStateChanged\", onVideoDeviceStateChanged);\n\n            return () => {\n                rtcEngine.off(\"audioDeviceStateChanged\", onAudioDeviceStateChanged);\n                rtcEngine.off(\"videoDeviceStateChanged\", onVideoDeviceStateChanged);\n            };\n        }, \"init\");\n\n        this.sideEffect.add(() => {\n            const onError = (_err: number, msg: string): void => {\n                this.events.emit(\"error\", new Error(msg));\n            };\n            rtcEngine.on(\"error\", onError);\n            return () => rtcEngine.off(\"error\", onError);\n        });\n\n        if (process.env.NODE_ENV === \"development\") {\n            this.sideEffect.add(() => {\n                const onJoinedChannel = (channel: string, uid: number): void => {\n                    console.log(`[RTC] ${uid} join channel ${channel}`);\n                };\n\n                const onUserJoined = (uid: string): void => {\n                    console.log(\"[RTC] userJoined\", uid);\n                };\n\n                const onLeavechannel = (): void => {\n                    console.log(\"[RTC] onleaveChannel\");\n                };\n\n                const onError = (err: number, msg: string): void => {\n                    console.error(\"[RTC] onerror----\", err, msg);\n                };\n\n                rtcEngine.on(\"joinedChannel\", onJoinedChannel);\n                rtcEngine.on(\"userJoined\", onUserJoined);\n                rtcEngine.on(\"leavechannel\", onLeavechannel);\n                rtcEngine.on(\"error\", onError);\n\n                return () => {\n                    rtcEngine.off(\"joinedChannel\", onJoinedChannel);\n                    rtcEngine.off(\"userJoined\", onUserJoined);\n                    rtcEngine.off(\"leavechannel\", onLeavechannel);\n                    rtcEngine.off(\"error\", onError);\n                };\n            }, \"dev-log\");\n        }\n    }\n\n    public override async destroy(): Promise<void> {\n        super.destroy();\n\n        this.sideEffect.flushAll();\n\n        await this.leaveRoom();\n    }\n\n    public async joinRoom(config: IServiceVideoChatJoinRoomConfig): Promise<void> {\n        if (!this.rtcEngine) {\n            throw new Error(\"AgoraRTC is not provided\");\n        }\n\n        if (this.roomUUID) {\n            if (this.roomUUID === config.roomUUID) {\n                return;\n            }\n            this.leaveRoom();\n        }\n        return this._join(config);\n    }\n\n    public async leaveRoom(): Promise<void> {\n        if (this.roomUUID) {\n            this.rtcEngine.leaveChannel();\n            this.rtcEngine.videoSourceLeave();\n        }\n        this._roomSideEffect.flushAll();\n        this.uid = undefined;\n        this.roomUUID = undefined;\n        this.mode = undefined;\n        this.shareScreenUID = undefined;\n        this.shareScreen.setActive(false);\n        this.shareScreen.setParams(null);\n    }\n\n    public override getAvatar(uid?: string): IServiceVideoChatAvatar | undefined {\n        if (!this.isJoinedRoom) {\n            return;\n        }\n        if (!uid || uid === \"0\" || this.uid === uid) {\n            return this.localAvatar;\n        }\n        if (this.shareScreenUID === uid) {\n            throw new Error(\"getAvatar(shareScreenUID) is not supported.\");\n        }\n        let remoteAvatar = this._remoteAvatars.get(uid);\n        if (!remoteAvatar) {\n            remoteAvatar = new RTCRemoteAvatar({ rtc: this, uid });\n            this._remoteAvatars.set(uid, remoteAvatar);\n        }\n        return remoteAvatar;\n    }\n\n    public getTestAvatar(): IServiceVideoChatAvatar {\n        return this.localAvatar;\n    }\n\n    public override getVolumeLevel(uid?: IServiceVideoChatUID): number {\n        return this._volumeLevels.get(uid || \"0\") || 0;\n    }\n\n    public async setRole(role: IServiceVideoChatRole): Promise<void> {\n        if (this.rtcEngine && this.mode === IServiceVideoChatMode.Broadcast) {\n            this.rtcEngine.setClientRole(role === IServiceVideoChatRole.Host ? 1 : 2);\n        }\n    }\n\n    public getCameraID(): string | undefined {\n        return this._cameraID;\n    }\n\n    public async setCameraID(deviceId: string): Promise<void> {\n        if (this._cameraID !== deviceId) {\n            this.rtcEngine.setVideoDevice(deviceId);\n            this._cameraID = deviceId;\n            this.events.emit(\"camera-changed\", deviceId);\n        }\n    }\n\n    public async getCameraDevices(): Promise<IServiceVideoChatDevice[]> {\n        return (this.rtcEngine.getVideoDevices() as FlatRTCAgoraElectronDevice[]).map(device => ({\n            deviceId: device.deviceid,\n            label: device.devicename,\n        }));\n    }\n\n    public getMicID(): string | undefined {\n        return this._micID;\n    }\n\n    public async setMicID(deviceId: string): Promise<void> {\n        if (this._micID !== deviceId) {\n            this.rtcEngine.setAudioRecordingDevice(deviceId);\n            this._micID = deviceId;\n            this.events.emit(\"mic-changed\", deviceId);\n        }\n    }\n\n    public async getMicDevices(): Promise<IServiceVideoChatDevice[]> {\n        return (this.rtcEngine.getAudioRecordingDevices() as FlatRTCAgoraElectronDevice[]).map(\n            device => ({\n                deviceId: device.deviceid,\n                label: device.devicename,\n            }),\n        );\n    }\n\n    /** Does not support  */\n    public getSpeakerID(): string | undefined {\n        return this._speakerID;\n    }\n\n    public async setSpeakerID(deviceId: string): Promise<void> {\n        if (this._speakerID !== deviceId) {\n            this._speakerID = deviceId;\n            this.rtcEngine.setAudioPlaybackDevice(deviceId);\n            this.events.emit(\"speaker-changed\", deviceId);\n        }\n    }\n\n    public async getSpeakerDevices(): Promise<IServiceVideoChatDevice[]> {\n        return (this.rtcEngine.getAudioPlaybackDevices() as FlatRTCAgoraElectronDevice[]).map(\n            device => ({\n                deviceId: device.deviceid,\n                label: device.devicename,\n            }),\n        );\n    }\n\n    public getSpeakerVolume(): number {\n        return this.rtcEngine.getAudioPlaybackVolume() / 255 || 0;\n    }\n\n    public override async setSpeakerVolume(volume: number): Promise<void> {\n        volume = Math.max(0, Math.min(volume, 1));\n        this.rtcEngine.setAudioPlaybackVolume(Math.ceil(volume * 255));\n    }\n\n    public override startNetworkTest(): void {\n        this.sideEffect.add(() => {\n            const rtcEngine = this.rtcEngine;\n            const handler = (quality: AgoraNetworkQuality): void => {\n                this.events.emit(\"network-test\", quality);\n            };\n            rtcEngine.on(\"lastMileQuality\", handler);\n            return () => rtcEngine.off(\"lastMileQuality\", handler);\n        }, \"network-test\");\n\n        this.rtcEngine.startLastmileProbeTest({\n            expectedDownlinkBitrate: 100000,\n            expectedUplinkBitrate: 100000,\n            probeDownlink: true,\n            probeUplink: true,\n        });\n    }\n\n    public override stopNetworkTest(): void {\n        this.rtcEngine.stopLastmileProbeTest();\n        this.sideEffect.flush(\"network-test\");\n    }\n\n    public override startCameraTest(el: HTMLElement): void {\n        this.rtcEngine.enableVideo();\n\n        const avatar = this.localAvatar;\n        avatar.setElement(el);\n        avatar.enableCamera(true);\n        avatar.enableMic(true);\n\n        this.rtcEngine.startPreview();\n    }\n\n    public override stopCameraTest(): void {\n        const avatar = this.localAvatar;\n        avatar.setElement(null);\n        avatar.enableCamera(false);\n        avatar.enableMic(false);\n\n        this.rtcEngine.stopPreview();\n        this.rtcEngine.disableVideo();\n    }\n\n    public override startMicTest(): void {\n        this.rtcEngine.startAudioRecordingDeviceTest(300);\n\n        this.sideEffect.add(() => {\n            const rtcEngine = this.rtcEngine;\n            const handler = (\n                _speakers: unknown,\n                _speakerNumber: unknown,\n                totalVolume: number,\n            ): void => {\n                this.events.emit(\"volume-level-changed\", totalVolume / 255);\n            };\n            rtcEngine.on(\"groupAudioVolumeIndication\", handler);\n            return () => rtcEngine.off(\"groupAudioVolumeIndication\", handler);\n        }, \"mic-test\");\n    }\n\n    public override stopMicTest(): void {\n        this.rtcEngine.stopAudioRecordingDeviceTest();\n        this.sideEffect.flush(\"mic-test\");\n    }\n\n    public override startSpeakerTest(filePath: string): void {\n        this.rtcEngine.enableAudio();\n        this.rtcEngine.enableLocalAudio(true);\n        this.rtcEngine.startAudioPlaybackDeviceTest(filePath);\n    }\n\n    public override stopSpeakerTest(): void {\n        this.rtcEngine.stopAudioPlaybackDeviceTest();\n        this.rtcEngine.enableLocalAudio(false);\n        this.rtcEngine.disableAudio();\n    }\n\n    private async _join({\n        uid,\n        token,\n        mode,\n        refreshToken,\n        role,\n        roomUUID,\n        shareScreenUID,\n        shareScreenToken,\n    }: IServiceVideoChatJoinRoomConfig): Promise<void> {\n        this._roomSideEffect.flushAll();\n\n        this.shareScreenUID = shareScreenUID;\n\n        const channelProfile = mode === IServiceVideoChatMode.Broadcast ? 1 : 0;\n        this.rtcEngine.setChannelProfile(channelProfile);\n        this.rtcEngine.videoSourceSetChannelProfile(channelProfile);\n        this.rtcEngine.setVideoEncoderConfiguration({\n            bitrate: 0,\n            degradationPreference: 1,\n            frameRate: 15,\n            minBitrate: -1,\n            minFrameRate: -1,\n            mirrorMode: 0,\n            orientationMode: 0,\n            height: 216,\n            width: 288,\n        });\n\n        if (mode === IServiceVideoChatMode.Broadcast) {\n            this.rtcEngine.setClientRole(role === IServiceVideoChatRole.Host ? 1 : 2);\n        }\n\n        this.rtcEngine.enableVideo();\n        this.rtcEngine.enableAudio();\n        // prevent camera being turned on temporarily right after joining room\n        this.rtcEngine.enableLocalVideo(false);\n        this.rtcEngine.enableLocalAudio(false);\n\n        if (refreshToken) {\n            this._roomSideEffect.add(() => {\n                const handler = async (): Promise<void> => {\n                    const token = await refreshToken(roomUUID);\n                    this.rtcEngine.renewToken(token);\n                };\n                this.rtcEngine.on(\"tokenPrivilegeWillExpire\", handler);\n                return () => this.rtcEngine.off(\"tokenPrivilegeWillExpire\", handler);\n            });\n        }\n\n        this._roomSideEffect.add(() => {\n            let lowVolumeLevelCount = 0;\n            const updateVolumeLevels = (speakers: Array<{ uid: number; volume: number }>): void => {\n                speakers.forEach(({ uid, volume }) => {\n                    volume = volume / 255;\n\n                    if (uid === 0) {\n                        const oldVolume = this._volumeLevels.get(\"0\") || 0;\n                        this._volumeLevels.set(String(uid), volume);\n                        if (this.uid) {\n                            this._volumeLevels.set(this.uid, volume);\n                        }\n\n                        if (Math.abs(oldVolume - volume) > 0.00001) {\n                            this.events.emit(\"volume-level-changed\", oldVolume);\n                        }\n\n                        if (volume <= AgoraRTCElectron.LOW_VOLUME_LEVEL_THRESHOLD) {\n                            if (++lowVolumeLevelCount >= 10) {\n                                this.events.emit(\"err-low-volume\");\n                            }\n                        } else {\n                            lowVolumeLevelCount = 0;\n                        }\n                    } else {\n                        this._volumeLevels.set(String(uid), volume);\n                    }\n                });\n            };\n            const deleteVolumeLevels = (uid: number): void => {\n                this._volumeLevels.delete(String(uid));\n            };\n\n            this.rtcEngine.on(\"groupAudioVolumeIndication\", updateVolumeLevels);\n            this.rtcEngine.on(\"userOffline\", deleteVolumeLevels);\n            this.rtcEngine.off(\"userMuteAudio\", deleteVolumeLevels);\n            return () => {\n                this.rtcEngine.off(\"groupAudioVolumeIndication\", updateVolumeLevels);\n                this.rtcEngine.off(\"userOffline\", deleteVolumeLevels);\n                this.rtcEngine.off(\"userMuteAudio\", deleteVolumeLevels);\n            };\n        });\n\n        this._roomSideEffect.add(() => {\n            const handler = (uid_: number): void => {\n                const uid: IServiceVideoChatUID = String(uid_);\n                if (this.shareScreenUID === uid && this.shareScreen.shouldSubscribeRemoteTrack()) {\n                    this.shareScreen.setActive(true);\n                    return;\n                }\n                let avatar = this._remoteAvatars.get(uid);\n                if (!avatar) {\n                    avatar = new RTCRemoteAvatar({ rtc: this, uid });\n                    this._remoteAvatars.set(uid, avatar);\n                }\n                avatar.setActive(true);\n            };\n\n            this.rtcEngine.on(\"userJoined\", handler);\n            return () => this.rtcEngine.off(\"userJoined\", handler);\n        });\n\n        this._roomSideEffect.add(() => {\n            const handler = (uid_: number): void => {\n                const uid: IServiceVideoChatUID = String(uid_);\n                if (this.shareScreenUID === uid) {\n                    this.shareScreen.setActive(false);\n                    return;\n                }\n                const avatar = this._remoteAvatars.get(uid);\n                if (avatar) {\n                    avatar.destroy();\n                    this._remoteAvatars.delete(uid);\n                }\n            };\n            this.rtcEngine.on(\"userOffline\", handler);\n            return () => this.rtcEngine.off(\"userOffline\", handler);\n        });\n\n        this._roomSideEffect.addDisposer(\n            this.events.remit(\"network\", () => {\n                let uplink: IServiceVideoChatNetworkQualityType = 0;\n                let downlink: IServiceVideoChatNetworkQualityType = 0;\n                let delay = NaN;\n\n                const onNetworkQuality = (\n                    uid_: number,\n                    uplinkQuality: AgoraNetworkQuality,\n                    downlinkQuality: AgoraNetworkQuality,\n                ): void => {\n                    const uid: IServiceVideoChatUID = String(uid_);\n                    if (uid === \"0\" || uid === this.uid) {\n                        uplink = uplinkQuality;\n                        downlink = downlinkQuality;\n                        this.events.emit(\"network\", { uplink, downlink, delay });\n                    }\n                };\n\n                const checkDelay = (stats: RtcStats): void => {\n                    delay = stats.lastmileDelay;\n                    this.events.emit(\"network\", { uplink, downlink, delay });\n                };\n\n                this.rtcEngine.on(\"rtcStats\", checkDelay);\n                this.rtcEngine.on(\"networkQuality\", onNetworkQuality);\n                return () => {\n                    this.rtcEngine.off(\"rtcStats\", checkDelay);\n                    this.rtcEngine.off(\"networkQuality\", onNetworkQuality);\n                };\n            }),\n        );\n\n        const joinRoomToken = token || (await refreshToken?.(roomUUID));\n        if (!joinRoomToken) {\n            throw new Error(\"No join room token provided\");\n        }\n\n        if (this.rtcEngine.joinChannel(joinRoomToken, roomUUID, \"\", Number(uid)) < 0) {\n            throw new Error(\"[RTC]: join channel failed\");\n        }\n\n        this.rtcEngine.enableAudioVolumeIndication(500, 3);\n\n        this.uid = uid;\n        this.roomUUID = roomUUID;\n        this.shareScreenUID = shareScreenUID;\n        this.mode = mode;\n        this.shareScreen.setParams({\n            roomUUID,\n            token: shareScreenToken,\n            uid: shareScreenUID,\n        });\n    }\n}\n"],"names":["IServiceShareScreen","__publicField","Remitter","doesNotSupportError","_info","type","IServiceVideoChat","SideEffectManager","_volume","_el","_filePath","FlatRTCAgoraElectronMode","FlatRTCAgoraElectronRole","RTCRemoteAvatar","config","Val","combine","el","active","e","shouldMic","shouldCamera","enabled","RTCLocalAvatar","IServiceVideoChatRole","rect","videoSourceParams","AgoraRTCElectronShareScreen","_a","params","uid","screenInfo","resolve","displayList","res","windowList","convertScreenInfo","info","compact","element","roomUUID","token","arr","_AgoraRTCElectron","rtcEngine","getSpeakerID","getMicID","getCameraID","onAudioDeviceStateChanged","micID","speakerID","onVideoDeviceStateChanged","cameraID","onError","_err","msg","remoteAvatar","role","IServiceVideoChatMode","deviceId","device","volume","handler","quality","avatar","_speakers","_speakerNumber","totalVolume","filePath","mode","refreshToken","shareScreenUID","shareScreenToken","channelProfile","lowVolumeLevelCount","updateVolumeLevels","speakers","oldVolume","deleteVolumeLevels","uid_","uplink","downlink","delay","onNetworkQuality","uplinkQuality","downlinkQuality","checkDelay","stats","joinRoomToken","AgoraRTCElectron"],"mappings":"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"}